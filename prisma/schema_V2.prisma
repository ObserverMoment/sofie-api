datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id          String   @id @default(uuid())
    firebaseUid String   @unique
    createdAt   DateTime @default(now())
    username    String   @unique
}

///////////////////////////////////////
//// Global / Core Data ///////////////
///////////////////////////////////////
model BodyArea {
    id                 String              @id @default(uuid())
    createdAt          DateTime            @default(now())
    name               String              @unique
    altNames           String?
    BodyAreaMoveScores BodyAreaMoveScore[]
    frontBack          BodyAreaFrontBack   @default(FRONT)
    upperLower         BodyAreaUpperLower  @default(UPPER)
}

model BodyAreaMoveScore {
    createdAt  DateTime @default(now())
    move       Move     @relation(fields: [moveId], references: [id])
    moveId     String
    bodyArea   BodyArea @relation(fields: [bodyAreaId], references: [id])
    bodyAreaId String
    score      Int      @default(1)

    @@id([moveId, bodyAreaId])
}

model Equipment {
    id                 String              @id @default(uuid())
    createdAt          DateTime            @default(now())
    name               String              @unique
    altNames           String?
    imageUrl           String?
    loadAdjustable     Boolean             @default(true)
    RequiredForMoves   Move[]              @relation("moveToRequiredEquipments", references: [id])
    SelectableForMoves Move[]              @relation("moveToSelectableEquipments", references: [id])
    WorkoutMoves       WorkoutMove[]
    GymProfiles        GymProfile[]
    UserBenchmarks     UserBenchmark[]
    TimedWorkoutMove   TimedWorkoutMove[]
    LoggedWorkoutMove  LoggedWorkoutMove[]
}

// General, Cardio, Barre, Yoga etc
model MoveType {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    name        String
    description String
    imageUrl    String
    Moves       Move[]
}

model WorkoutGoal {
    id              String           @id @default(uuid())
    createdAt       DateTime         @default(now())
    name            String
    description     String
    imageUri        String?
    Workouts        Workout[]
    WorkoutPrograms WorkoutProgram[]
}

///////////////////////////////////////
//// User and User Related ////////////
///////////////////////////////////////
// Height in cms / weight in kgs
model User {
    id                       String                    @id @default(uuid())
    firebaseUid              String                    @unique
    createdAt                DateTime                  @default(now())
    hasOnboarded             Boolean                   @default(false)
    userProfileScope         UserProfileScope          @default(PRIVATE)
    avatarUri                String?
    introVideoUri            String?
    introVideoThumbUri       String?
    displayName              String?                   @unique
    firstname                String?
    lastname                 String?
    themePreference          ThemePreference           @default(DARK)
    bio                      String?
    tagline                  String?
    birthdate                DateTime?
    gender                   Gender?                   @default(UNSPECIFIED)
    height                   Float?
    weight                   Float?
    townCity                 String?
    countryCode              String?
    instagramUrl             String?
    tiktokUrl                String?
    youtubeUrl               String?
    snapUrl                  String?
    linkedinUrl              String?
    unitSystem               UnitSystem                @default(METRIC)
    CustomMoves              Move[]
    Workouts                 Workout[]
    /// @onDelete(CASCADE)
    ScheduledWorkouts        ScheduledWorkout[]
    /// @onDelete(CASCADE)
    LoggedWorkouts           LoggedWorkout[]
    /// @onDelete(CASCADE)
    GymProfiles              GymProfile[]
    WorkoutPrograms          WorkoutProgram[]
    /// @onDelete(CASCADE)
    WorkoutProgramEnrolments WorkoutProgramEnrolment[]
    WorkoutProgramReviews    WorkoutProgramReview[]
    /// @onDelete(CASCADE)
    UserBenchmarks           UserBenchmark[]
    /// @onDelete(CASCADE)
    Collections              UserCollection[]
    /// @onDelete(CASCADE)
    ProgressJournals         ProgressJournal[]
    /// @onDelete(CASCADE)
    ProgressJournalGoalTags  ProgressJournalGoalTag[]
}

model UserCollection {
    id              String           @id @default(uuid())
    createdAt       DateTime         @default(now())
    User            User             @relation(fields: [userId], references: [id])
    userId          String
    name            String
    description     String?
    Workouts        Workout[]
    WorkoutPrograms WorkoutProgram[]
}

model ScheduledWorkout {
    id              String         @id @default(uuid())
    createdAt       DateTime       @default(now())
    User            User           @relation(fields: [userId], references: [id])
    userId          String
    notes           String?
    scheduledAt     DateTime       @default(now())
    Workout         Workout?       @relation(fields: [workoutId], references: [id])
    workoutId       String?
    LoggedWorkout   LoggedWorkout? @relation(fields: [loggedWorkoutId], references: [id])
    loggedWorkoutId String?
    GymProfile      GymProfile?    @relation(fields: [gymProfileId], references: [id])
    gymProfileId    String?
}

model UserBenchmark {
    id           String               @id @default(uuid())
    createdAt    DateTime             @default(now())
    Creator      User                 @relation(fields: [creatorId], references: [id])
    creatorId    String
    name         String
    description  String?
    reps         Float
    RepType      WorkoutMoveRepType   @default(REPS)
    load         Float?
    loadUnit     LoadUnit             @default(KG)
    distanceUnit DistanceUnit         @default(METRES)
    scoreType    BenchmarkScoreType   @default(LOAD)
    Equipment    Equipment[]
    Move         Move                 @relation(fields: [moveId], references: [id])
    moveId       String
    /// @onDelete(CASCADE)
    Entries      UserBenchmarkEntry[]
}

// Allows for progress tracking over time of any given benchmark that the user has created
model UserBenchmarkEntry {
    id              String        @id @default(uuid())
    createdAt       DateTime      @default(now())
    score           Float
    notes           String?
    videoUri        String?
    imageUri        String?
    UserBenchmark   UserBenchmark @relation(fields: [userBenchmarkId], references: [id])
    userBenchmarkId String
}

model GymProfile {
    id                String             @id @default(uuid())
    createdAt         DateTime           @default(now())
    User              User               @relation(fields: [userId], references: [id])
    userId            String
    name              String
    description       String?
    postcode          String?
    // i.e. there is no equipment as this gym.
    bodyweightOnly    Boolean            @default(false)
    Equipments        Equipment[]
    ScheduledWorkouts ScheduledWorkout[]
    LoggedWorkouts    LoggedWorkout[]
}

////////////////////////////////////////////////////
///// Workout Related Models and Children //////////
////////////////////////////////////////////////////
model Workout {
    id                    String                  @id @default(uuid())
    createdAt             DateTime                @default(now())
    Creator               User?                   @relation(fields: [creatorId], references: [id])
    creatorId             String?
    name                  String
    summary               String?
    description           String?
    introVideoUri         String?
    introAudioUri         String?
    coverImageUri         String?
    difficultyLevel       Int                     @default(50)
    contentAccessScope    ContentAccessScope      @default(PRIVATE)
    WorkoutSections       WorkoutSection[]
    LoggedWorkout         LoggedWorkout[]
    ScheduledWorkout      ScheduledWorkout[]
    WorkoutGoal           WorkoutGoal?            @relation(fields: [workoutGoalId], references: [id])
    workoutGoalId         String?
    UserCollection        UserCollection?         @relation(fields: [userCollectionId], references: [id])
    userCollectionId      String?
    WorkoutProgramWorkout WorkoutProgramWorkout[]
}

// A workout can have many sections - each one can be a different section type / structure.
// TODO: Check() validation should be written in Postgres to ensure only one section type is on any one section.
// 'Exclusive-belongs-to' example
// https://hashrocket.com/blog/posts/modeling-polymorphic-associations-in-a-relational-database
model WorkoutSection {
    id                       String                  @id @default(uuid())
    createdAt                DateTime                @default(now())
    sortPosition             Int
    introVideoUri            String? // Will play before workout starts
    introAudioUri            String? // Will play before workout starts
    classVideoUrl            String? // Will loop throughout duration of the workout
    classAudioUri            String? // Will loop throughout duration of the workout
    outroVideoUri            String? // Will play at end of workout
    outroAudioUri            String? // Will play at end of workout
    Workout                  Workout                 @relation(fields: [workoutId], references: [id])
    workoutId                String
    TrainingWorkoutSection   TrainingWorkoutSection? @relation(fields: [trainingWorkoutSectionId], references: [id])
    trainingWorkoutSectionId String?
    TimedWorkoutSection      TimedWorkoutSection?    @relation(fields: [timedWorkoutSectionId], references: [id])
    timedWorkoutSectionId    String?
    AmrapWorkoutSection      AmrapWorkoutSection?    @relation(fields: [amrapWorkoutSectionId], references: [id])
    amrapWorkoutSectionId    String?
    FortimeWorkoutSection    FortimeWorkoutSection?  @relation(fields: [fortimeWorkoutSectionId], references: [id])
    fortimeWorkoutSectionId  String?
    LastStandingSection      LastStandingSection[]
}

//// Timed Sections i.e. HIIT Circuit, Tabata, EMOM ////
model TimedWorkoutSection {
    id                String             @id @default(uuid())
    createdAt         DateTime           @default(now())
    // Use type to know how to display a workout section when viewing it and when doing it.
    type              TimedWorkoutType   @default(HIIT)
    name              String?
    notes             String?
    rounds            Int
    TimedWorkoutMoves TimedWorkoutMove[]
    WorkoutSection    WorkoutSection?
}

model TimedWorkoutMove {
    id                    String              @id @default(uuid())
    createdAt             DateTime            @default(now())
    sortPosition          Int
    time                  Int // Seconds
    loadAmount            Float?
    loadUnit              LoadUnit            @default(KG)
    Move                  Move                @relation(fields: [moveId], references: [id])
    moveId                String
    Equipment             Equipment?          @relation(fields: [equipmentId], references: [id])
    equipmentId           String?
    TimedWorkoutSection   TimedWorkoutSection @relation(fields: [timedWorkoutSectionId], references: [id])
    timedWorkoutSectionId String
}

//// Non Timed / Competitive Sections ////
model TrainingWorkoutSection {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    name           String?
    notes          String?
    WorkoutSets    WorkoutSet[]
    WorkoutSection WorkoutSection[]
}

model AmrapWorkoutSection {
    id             String          @id @default(uuid())
    createdAt      DateTime        @default(now())
    name           String?
    notes          String?
    timecap        Int // Seconds
    WorkoutSets    WorkoutSet[]
    WorkoutSection WorkoutSection?
}

model FortimeWorkoutSection {
    id             String          @id @default(uuid())
    createdAt      DateTime        @default(now())
    name           String?
    notes          String?
    rounds         Int             @default(1)
    timecap        Int? // Seconds - optional timecap / max time.
    WorkoutSets    WorkoutSet[]
    WorkoutSection WorkoutSection?
}

//// Keep completing the workout sets within the timecap for as long as possible ////
model LastStandingSection {
    id               String          @id @default(uuid())
    createdAt        DateTime        @default(now())
    name             String?
    notes            String?
    finishAfter      Int? // Seconds - optional "finish line" for if you need to ensure non open ended length.
    // Initially timecaps[0] is timecap for workoutsSets[0], timecaps[1] for workoutSets[1] etc
    // Arrays do not need to be the same length - each can loop at different points
    timecaps         Int[]
    WorkoutSets      WorkoutSet[]
    WorkoutSection   WorkoutSection? @relation(fields: [workoutSectionId], references: [id])
    workoutSectionId String?
}

model WorkoutSet {
    id                       String                  @id @default(uuid())
    createdAt                DateTime                @default(now())
    sortPosition             Int
    rounds                   Int                     @default(1)
    notes                    String?
    // If there is more than one move then this is a superset
    // In a superset you do each workoutMove in the array one after another
    // And then repeat this process rounds times
    WorkoutMoves             WorkoutMove[]
    AmrapWorkoutSection      AmrapWorkoutSection?    @relation(fields: [amrapWorkoutSectionId], references: [id])
    amrapWorkoutSectionId    String?
    FortimeWorkoutSection    FortimeWorkoutSection?  @relation(fields: [fortimeWorkoutSectionId], references: [id])
    fortimeWorkoutSectionId  String?
    TrainingWorkoutSection   TrainingWorkoutSection? @relation(fields: [trainingWorkoutSectionId], references: [id])
    trainingWorkoutSectionId String?
    LastStandingSection      LastStandingSection?    @relation(fields: [lastStandingSectionId], references: [id])
    lastStandingSectionId    String?
}

model WorkoutMove {
    id           String             @id @default(uuid())
    createdAt    DateTime           @default(now())
    sortPosition Int
    repType      WorkoutMoveRepType @default(REPS)
    reps         Float?             @default(10)
    distanceUnit DistanceUnit       @default(METRES)
    loadAmount   Float?
    loadUnit     LoadUnit           @default(KG)
    Move         Move               @relation(fields: [moveId], references: [id])
    moveId       String
    Equipment    Equipment?         @relation(fields: [equipmentId], references: [id])
    equipmentId  String?
    WorkoutSet   WorkoutSet         @relation(fields: [workoutSetId], references: [id])
    workoutSetId String
}

model Move {
    id                   String               @id @default(uuid())
    createdAt            DateTime             @default(now())
    archived             Boolean              @default(false)
    Creator              User?                @relation(fields: [creatorId], references: [id])
    creatorId            String?
    // Default to CUSTOM.
    // A user should never be able to create a STANDARD move (aka an official move), only ADMIN.
    scope                MoveScope            @default(CUSTOM)
    // Should be short!
    name                 String
    // Text search will search this field - include the main name + any common variations
    // E.g. Air Bike, Assault Bike, specific brands, common misspellings etc.
    searchTerms          String?
    description          String?
    demoVideoUri         String?
    demoVideoThumbUri    String?
    MoveType             MoveType?            @relation(fields: [moveTypeId], references: [id])
    moveTypeId           String?
    ValidRepTypes        WorkoutMoveRepType[]
    RequiredEquipments   Equipment[]          @relation("moveToRequiredEquipments", references: [id])
    SelectableEquipments Equipment[]          @relation("moveToSelectableEquipments", references: [id])
    WorkoutMoves         WorkoutMove[]
    TimedWorkoutMoves    TimedWorkoutMove[]
    /// @onDelete(CASCADE)
    BodyAreaMoveScores   BodyAreaMoveScore[]
    /// @onDelete(CASCADE)
    UserBenchmarks       UserBenchmark[]
    LoggedWorkoutMove    LoggedWorkoutMove[]
}

/////////////////////////////////////////////////////////
///// Workout Program (aka Plan) Related Models /////////
/////////////////////////////////////////////////////////
model WorkoutProgram {
    id                     String                    @id @default(uuid())
    createdAt              DateTime                  @default(now())
    name                   String
    description            String?
    imageUri               String?
    videoUri               String?
    videoThumbUri          String?
    contentAccessScope     ContentAccessScope        @default(PRIVATE)
    Creator                User                      @relation(fields: [creatorId], references: [id])
    creatorId              String
    /// @onDelete(CASCADE)
    Enrolments             WorkoutProgramEnrolment[]
    WorkoutGoals           WorkoutGoal[]
    /// @onDelete(CASCADE)
    WorkoutProgramWorkouts WorkoutProgramWorkout[]
    /// @onDelete(CASCADE)
    WorkoutProgramReviews  WorkoutProgramReview[]
    UserCollections        UserCollection[]
}

// A single user enrolled in a plan a single time
// A single user can also enrol multiple times
model WorkoutProgramEnrolment {
    id               String          @id @default(uuid())
    createdAt        DateTime        @default(now())
    startDate        DateTime?       @default(now())
    WorkoutProgram   WorkoutProgram  @relation(fields: [workoutProgramId], references: [id])
    workoutProgramId String
    User             User            @relation(fields: [userId], references: [id])
    userId           String
    LoggedWorkouts   LoggedWorkout[]
}

model WorkoutProgramReview {
    id               String         @id @default(uuid())
    createdAt        DateTime       @default(now())
    Reviewer         User           @relation(fields: [reviewerId], references: [id])
    reviewerId       String
    score            Float
    comment          String?
    WorkoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
    workoutProgramId String
}

model WorkoutProgramWorkout {
    id               String          @id @default(uuid())
    createdAt        DateTime        @default(now())
    // Day on which the workout is planned. i.e. day 8 == week 2 day 1.
    // The decimal can be used to differentiate between having multiple workouts on each day.
    dayNumber        Float
    notes            String?
    WorkoutProgram   WorkoutProgram  @relation(fields: [workoutProgramId], references: [id])
    workoutProgramId String
    Workout          Workout         @relation(fields: [workoutId], references: [id])
    workoutId        String
    LoggedWorkouts   LoggedWorkout[]
}

//////////////////////////////////////////////////////////
///// Logged Workout Related Models and Children /////////
//////////////////////////////////////////////////////////
model LoggedWorkout {
    id                        String                   @id @default(uuid())
    createdAt                 DateTime                 @default(now())
    completedOn               DateTime
    User                      User                     @relation(fields: [userId], references: [id])
    userId                    String
    notes                     String?
    videoUri                  String?
    videoThumbUri             String?
    imageUri                  String?
    LoggedWorkoutSections     LoggedWorkoutSection[]
    Workout                   Workout?                 @relation(fields: [workoutId], references: [id])
    workoutId                 String?
    ScheduledWorkout          ScheduledWorkout?
    GymProfile                GymProfile?              @relation(fields: [gymProfileId], references: [id])
    gymProfileId              String?
    // Need to connect to both the enrolment and the programWorkout to ensure ease of lookup.
    WorkoutProgramEnrolment   WorkoutProgramEnrolment? @relation(fields: [workoutProgramEnrolmentId], references: [id])
    workoutProgramEnrolmentId String?
    WorkoutProgramWorkout     WorkoutProgramWorkout?   @relation(fields: [workoutProgramWorkoutId], references: [id])
    workoutProgramWorkoutId   String?
}

model LoggedWorkoutSection {
    id                String             @id @default(uuid())
    createdAt         DateTime           @default(now())
    sortPosition      Int
    timetakenMs       Int // Milliseconds
    notes             String?
    LoggedWorkoutSets LoggedWorkoutSet[]
    LoggedWorkout     LoggedWorkout      @relation(fields: [loggedWorkoutId], references: [id])
    loggedWorkoutId   String
}

model LoggedWorkoutSet {
    id                     String               @id @default(uuid())
    createdAt              DateTime             @default(now())
    sortPosition           Int
    timetakenMs            Int? // Milliseconds - optional
    LoggedWorkoutMoves     LoggedWorkoutMove[]
    LoggedWorkoutSection   LoggedWorkoutSection @relation(fields: [loggedWorkoutSectionId], references: [id])
    loggedWorkoutSectionId String
}

model LoggedWorkoutMove {
    id                 String             @id @default(uuid())
    createdAt          DateTime           @default(now())
    sortPosition       Int
    timetakenMs        Int? // Milliseconds - optional
    repType            WorkoutMoveRepType @default(REPS)
    reps               Float?             @default(10)
    distanceUnit       DistanceUnit       @default(METRES)
    loadAmount         Float?
    loadUnit           LoadUnit           @default(KG)
    Move               Move               @relation(fields: [moveId], references: [id])
    moveId             String
    Equipment          Equipment?         @relation(fields: [equipmentId], references: [id])
    equipmentId        String?
    LoggedWorkoutSet   LoggedWorkoutSet   @relation(fields: [loggedWorkoutSetId], references: [id])
    loggedWorkoutSetId String
}

////////////////////////////////////////////////
////// Progress Journal Related ////////////////
////////////////////////////////////////////////
model ProgressJournal {
    id                     String                 @id @default(uuid())
    createdAt              DateTime               @default(now())
    User                   User                   @relation(fields: [userId], references: [id])
    userId                 String
    name                   String
    description            String?
    /// @onDelete(CASCADE)
    ProgressJournalEntries ProgressJournalEntry[]
    /// @onDelete(CASCADE)
    ProgressJournalGoals   ProgressJournalGoal[]
}

model ProgressJournalEntry {
    id                String          @id @default(uuid())
    createdAt         DateTime        @default(now())
    notes             String?
    voiceNoteUri      String?
    bodyweight        Float?
    moodScore         Float?
    energyScore       Float?
    stressScore       Float?
    motivationScore   Float?
    progressPhotoUris String[]
    ProgressJournal   ProgressJournal @relation(fields: [progressJournalId], references: [id])
    progressJournalId String
}

model ProgressJournalGoal {
    id                      String                   @id @default(uuid())
    createdAt               DateTime                 @default(now())
    name                    String
    description             String?
    deadline                DateTime?
    completedDate           DateTime?
    ProgressJournalGoalTags ProgressJournalGoalTag[]
    ProgressJournal         ProgressJournal          @relation(fields: [progressJournalId], references: [id])
    progressJournalId       String
}

model ProgressJournalGoalTag {
    id                   String                @id @default(uuid())
    createdAt            DateTime              @default(now())
    tag                  String
    hexColor             String
    User                 User                  @relation(fields: [userId], references: [id])
    userId               String
    ProgressJournalGoals ProgressJournalGoal[]
}

//////////////////////////////////
//// ENUMS ///////////////////////
//////////////////////////////////
enum BenchmarkScoreType {
    // For 1,3,5 rep max etc
    LOAD
    // For max unbroken
    REPS
    // For fastest time to complete or max unbroken
    TIME
}

enum BodyAreaFrontBack {
    BACK
    FRONT
    BOTH
}

enum BodyAreaUpperLower {
    CORE
    LOWER
    UPPER
}

enum ContentAccessScope {
    OFFICIAL
    PUBLIC
    GROUP
    PRIVATE
}

enum DistanceUnit {
    METRES
    KILOMETRES
    YARDS
    MILES
}

enum Gender {
    MALE
    FEMALE
    UNSPECIFIED
}

enum LoadUnit {
    KG
    LB
    BODYWEIGHTPERCENT
}

// Standard moves are built in / official.
// Custom moves are created by users.
enum MoveScope {
    STANDARD
    CUSTOM
}

enum ThemePreference {
    DARK
    LIGHT
}

enum TimedWorkoutType {
    HIIT
    TABATA
    EMOM
}

enum UnitSystem {
    IMPERIAL
    METRIC
}

enum WorkoutMoveRepType {
    REPS
    CALORIES
    DISTANCE
    TIME
}

enum UserProfileScope {
    PRIVATE
    PUBLIC
}
