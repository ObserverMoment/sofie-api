generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Admin {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  createdAt   DateTime @default(now())
  username    String   @unique
}

/// ////////////////////////////////////
/// / Global / Core Data / Tags ////////
/// ////////////////////////////////////
model BodyArea {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  name                  String                 @unique
  altNames              String?
  frontBack             BodyAreaFrontBack      @default(FRONT)
  upperLower            BodyAreaUpperLower     @default(UPPER)
  BodyAreaMoveScores    BodyAreaMoveScore[]
  LoggedWorkoutSections LoggedWorkoutSection[]
}

model BodyAreaMoveScore {
  createdAt  DateTime @default(now())
  moveId     String
  bodyAreaId String
  score      Int      @default(1)
  BodyArea   BodyArea @relation(fields: [bodyAreaId], references: [id])
  Move       Move     @relation(fields: [moveId], references: [id])

  @@id([moveId, bodyAreaId])
}

model Equipment {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  name               String        @unique
  altNames           String?
  loadAdjustable     Boolean       @default(true)
  WorkoutMoves       WorkoutMove[]
  GymProfiles        GymProfile[]
  RequiredForMoves   Move[]        @relation("moveToRequiredEquipments")
  SelectableForMoves Move[]        @relation("moveToSelectableEquipments")
}

model Move {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  archived             Boolean              @default(false)
  scope                MoveScope            @default(CUSTOM)
  name                 String
  searchTerms          String?
  description          String?
  demoVideoUri         String?
  demoVideoThumbUri    String?
  moveTypeId           String?
  validRepTypes        WorkoutMoveRepType[]
  userId               String?
  MoveType             MoveType?            @relation(fields: [moveTypeId], references: [id])
  User                 User?                @relation(fields: [userId], references: [id])
  BodyAreaMoveScores   BodyAreaMoveScore[]
  WorkoutMoves         WorkoutMove[]
  RequiredEquipments   Equipment[]          @relation("moveToRequiredEquipments")
  SelectableEquipments Equipment[]          @relation("moveToSelectableEquipments")
}

model MoveType {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  name                  String
  description           String?
  imageUri              String?
  Moves                 Move[]
  LoggedWorkoutSections LoggedWorkoutSection[]
}

model WorkoutGoal {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  name           String
  description    String
  hexColor       String
  LoggedWorkouts LoggedWorkout[]
  Workouts       Workout[]
}

model WorkoutSectionType {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  name                  String
  subtitle              String
  description           String
  validRepTypes         WorkoutMoveRepType[]
  LoggedWorkoutSections LoggedWorkoutSection[]
  WorkoutSections       WorkoutSection[]
}

/// ////////////////////////////////////
/// / User and User Related ////////////
/// ////////////////////////////////////
model Collection {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  userId       String
  description  String?
  name         String
  User         User          @relation(fields: [userId], references: [id])
  Workouts     Workout[]
  WorkoutPlans WorkoutPlan[]
}

model GymProfile {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  name              String
  description       String?
  userId            String
  User              User               @relation(fields: [userId], references: [id])
  LoggedWorkouts    LoggedWorkout[]
  ScheduledWorkouts ScheduledWorkout[]
  Equipments        Equipment[]
}

model ScheduledWorkout {
  id                      String                 @id @default(uuid())
  createdAt               DateTime               @default(now())
  userId                  String
  scheduledAt             DateTime               @default(now())
  workoutId               String?
  loggedWorkoutId         String?                @unique
  gymProfileId            String?
  note                    String?
  workoutPlanEnrolmentId  String?
  GymProfile              GymProfile?            @relation(fields: [gymProfileId], references: [id])
  LoggedWorkout           LoggedWorkout?         @relation(fields: [loggedWorkoutId], references: [id])
  User                    User                   @relation(fields: [userId], references: [id])
  Workout                 Workout?               @relation(fields: [workoutId], references: [id])
  WorkoutPlanEnrolment    WorkoutPlanEnrolment?  @relation(fields: [workoutPlanEnrolmentId], references: [id])
  WorkoutPlanDayWorkout   WorkoutPlanDayWorkout? @relation(fields: [workoutPlanDayWorkoutId], references: [id])
  workoutPlanDayWorkoutId String?
}

model Skill {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  name           String
  experience     String?
  certification  String?
  awardingBody   String?
  certificateRef String? // Official reference that people can check to validate the cert.
  documentUri    String?
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model User {
  id                     String                  @id @default(uuid())
  firebaseUid            String                  @unique
  createdAt              DateTime                @default(now())
  hasOnboarded           Boolean                 @default(false)
  userProfileScope       UserProfileScope        @default(PRIVATE)
  avatarUri              String?
  introVideoUri          String?
  introVideoThumbUri     String?
  displayName            String                  @unique
  firstname              String?
  lastname               String?
  bio                    String?
  tagline                String?
  birthdate              DateTime?
  gender                 Gender                  @default(PNTS)
  townCity               String?
  countryCode            String?
  instagramHandle        String?
  tiktokHandle           String?
  youtubeHandle          String?
  linkedinHandle         String?
  ClubsWhereOwner        Club[]                  @relation("owner")
  ClubInviteTokens       ClubInviteToken[]
  Collections            Collection[]
  GymProfiles            GymProfile[]
  LoggedWorkouts         LoggedWorkout[]
  LoggedWorkoutSections  LoggedWorkoutSection[]
  CustomMoves            Move[]
  ScheduledWorkouts      ScheduledWorkout[]
  Skills                 Skill[]
  UserBenchmarks         UserBenchmark[]
  UserBenchmarkEntries   UserBenchmarkEntry[]
  Workouts               Workout[]
  WorkoutMoves           WorkoutMove[]
  WorkoutPlans           WorkoutPlan[]
  WorkoutPlanDays        WorkoutPlanDay[]
  WorkoutPlanDayWorkouts WorkoutPlanDayWorkout[]
  WorkoutPlanEnrolments  WorkoutPlanEnrolment[]
  WorkoutPlanReviews     WorkoutPlanReview[]
  WorkoutSections        WorkoutSection[]
  WorkoutSets            WorkoutSet[]
  WorkoutTag             WorkoutTag[]
  ClubsWhereAdmin        Club[]                  @relation("admin")
  ClubsWhereMember       Club[]                  @relation("member")
  BodyTrackingEntry      BodyTrackingEntry[]
  JournalNotes           JournalNote[]
  JournalMoods           JournalMood[]
  JournalGoals           JournalGoal[]
}

model UserBenchmark {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  lastEntryAt          DateTime             @default(now())
  userId               String
  name                 String
  description          String?
  benchmarkType        BenchmarkType        @default(MAXLOAD)
  equipmentInfo        String?
  loadUnit             LoadUnit             @default(KG)
  User                 User                 @relation(fields: [userId], references: [id])
  UserBenchmarkEntries UserBenchmarkEntry[]
}

model UserBenchmarkEntry {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  userId          String
  completedOn     DateTime      @default(now())
  note            String?
  videoUri        String?
  videoThumbUri   String?
  userBenchmarkId String
  score           Float
  UserBenchmark   UserBenchmark @relation(fields: [userBenchmarkId], references: [id])
  User            User          @relation(fields: [userId], references: [id])
}

/// /////////////////////////////////////////////////
/// // Club Related Models and Children //////////
/// /////////////////////////////////////////////////
model Club {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  name               String             @unique
  description        String?
  location           String?
  coverImageUri      String?
  introVideoUri      String?
  introVideoThumbUri String?
  introAudioUri      String?
  userId             String
  contentAccessScope ContentAccessScope @default(PRIVATE)
  Owner              User               @relation("owner", fields: [userId], references: [id])
  ClubInviteTokens   ClubInviteToken[]
  Workouts           Workout[]
  WorkoutPlans       WorkoutPlan[]
  Admins             User[]             @relation("admin")
  Members            User[]             @relation("member")
}

model ClubInviteToken {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  active        Boolean
  inviteLimit   Int      @default(0)
  clubId        String
  joinedUserIds String[]
  userId        String
  name          String
  Club          Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [userId], references: [id])
}

/// /////////////////////////////////////////////////
/// // Workout Related Models and Children //////////
/// /////////////////////////////////////////////////
model Workout {
  id                    String                  @id @default(uuid())
  createdAt             DateTime                @default(now())
  name                  String
  description           String?
  introVideoUri         String?
  introAudioUri         String?
  coverImageUri         String?
  contentAccessScope    ContentAccessScope      @default(PRIVATE)
  userId                String
  introVideoThumbUri    String?
  archived              Boolean                 @default(false)
  difficultyLevel       DifficultyLevel?
  lengthMinutes         Int?
  metaData              Json?
  User                  User                    @relation(fields: [userId], references: [id])
  LoggedWorkouts        LoggedWorkout[]
  ScheduledWorkouts     ScheduledWorkout[]
  WorkoutPlanDayWorkout WorkoutPlanDayWorkout[]
  WorkoutSections       WorkoutSection[]
  Clubs                 Club[]
  Collections           Collection[]
  WorkoutGoals          WorkoutGoal[]
  WorkoutTags           WorkoutTag[]
}

/// Used on both workouts and workout plans + maybe others (events, challenges) in the future. Free text tag for the user to tag their content.
model WorkoutTag {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  userId       String
  tag          String
  User         User          @relation(fields: [userId], references: [id])
  WorkoutPlans WorkoutPlan[]
  Workouts     Workout[]
}

model WorkoutSection {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  sortPosition         Int
  introVideoUri        String?
  introAudioUri        String?
  classAudioUri        String?
  workoutId            String
  name                 String?
  classVideoUri        String?
  introVideoThumbUri   String?
  workoutSectionTypeId String
  classVideoThumbUri   String?
  rounds               Int                @default(1)
  userId               String
  archived             Boolean            @default(false)
  note                 String?
  timecap              Int                @default(0)
  User                 User               @relation(fields: [userId], references: [id])
  Workout              Workout            @relation(fields: [workoutId], references: [id])
  WorkoutSectionType   WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  WorkoutSets          WorkoutSet[]
}

model WorkoutSet {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  sortPosition     Int
  rounds           Int            @default(1)
  workoutSectionId String
  userId           String
  duration         Int            @default(60)
  User             User           @relation(fields: [userId], references: [id])
  WorkoutSection   WorkoutSection @relation(fields: [workoutSectionId], references: [id])
  WorkoutMoves     WorkoutMove[]
}

model WorkoutMove {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  sortPosition Int
  repType      WorkoutMoveRepType
  reps         Float
  distanceUnit DistanceUnit       @default(METRES)
  loadAmount   Float              @default(0)
  loadUnit     LoadUnit           @default(KG)
  moveId       String
  equipmentId  String?
  workoutSetId String
  userId       String
  timeUnit     TimeUnit           @default(SECONDS)
  Equipment    Equipment?         @relation(fields: [equipmentId], references: [id])
  Move         Move               @relation(fields: [moveId], references: [id])
  User         User               @relation(fields: [userId], references: [id])
  WorkoutSet   WorkoutSet         @relation(fields: [workoutSetId], references: [id])
}

/// ////////////////////////////////////////
/// // Workout Plan Related Models /////////
/// ////////////////////////////////////////
model WorkoutPlan {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  archived              Boolean                @default(false)
  name                  String
  description           String?
  coverImageUri         String?
  introVideoUri         String?
  introVideoThumbUri    String?
  introAudioUri         String?
  contentAccessScope    ContentAccessScope     @default(PRIVATE)
  userId                String
  lengthWeeks           Int                    @default(2)
  daysPerWeek           Int                    @default(3)
  User                  User                   @relation(fields: [userId], references: [id])
  WorkoutPlanDays       WorkoutPlanDay[]
  WorkoutPlanEnrolments WorkoutPlanEnrolment[]
  WorkoutPlanReviews    WorkoutPlanReview[]
  Clubs                 Club[]
  Collections           Collection[]
  WorkoutTags           WorkoutTag[]
}

model WorkoutPlanDay {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  note                   String?
  dayNumber              Int
  workoutPlanId          String
  userId                 String
  User                   User                    @relation(fields: [userId], references: [id])
  WorkoutPlan            WorkoutPlan             @relation(fields: [workoutPlanId], references: [id])
  WorkoutPlanDayWorkouts WorkoutPlanDayWorkout[]
}

model WorkoutPlanDayWorkout {
  id                              String                           @id @default(uuid())
  createdAt                       DateTime                         @default(now())
  note                            String?
  sortPosition                    Int
  workoutId                       String
  workoutPlanDayId                String
  userId                          String
  User                            User                             @relation(fields: [userId], references: [id])
  Workout                         Workout                          @relation(fields: [workoutId], references: [id])
  WorkoutPlanDay                  WorkoutPlanDay                   @relation(fields: [workoutPlanDayId], references: [id])
  CompletedWorkoutPlanDayWorkouts CompletedWorkoutPlanDayWorkout[]
  ScheduledWorkouts               ScheduledWorkout[]
}

model WorkoutPlanEnrolment {
  id                              String                           @id @default(uuid())
  createdAt                       DateTime                         @default(now())
  startDate                       DateTime?
  userId                          String
  workoutPlanId                   String
  User                            User                             @relation(fields: [userId], references: [id])
  WorkoutPlan                     WorkoutPlan                      @relation(fields: [workoutPlanId], references: [id])
  ScheduledWorkouts               ScheduledWorkout[]
  CompletedWorkoutPlanDayWorkouts CompletedWorkoutPlanDayWorkout[]
}

model CompletedWorkoutPlanDayWorkout {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  WorkoutPlanDayWorkout   WorkoutPlanDayWorkout @relation(fields: [workoutPlanDayWorkoutId], references: [id])
  workoutPlanDayWorkoutId String
  LoggedWorkout           LoggedWorkout?        @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId         String?               @unique
  WorkoutPlanEnrolment    WorkoutPlanEnrolment  @relation(fields: [workoutPlanEnrolmentId], references: [id])
  workoutPlanEnrolmentId  String
}

model WorkoutPlanReview {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  userId        String
  score         Float
  comment       String?
  workoutPlanId String
  User          User        @relation(fields: [userId], references: [id])
  WorkoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
}

/// ///////////////////////////////////////////////////////
/// // Logged Workout Related Models and Children /////////
/// ///////////////////////////////////////////////////////
model LoggedWorkout {
  id                             String                          @id @default(uuid())
  createdAt                      DateTime                        @default(now())
  completedOn                    DateTime
  userId                         String
  name                           String
  workoutId                      String?
  note                           String?
  gymProfileId                   String?
  GymProfile                     GymProfile?                     @relation(fields: [gymProfileId], references: [id])
  User                           User                            @relation(fields: [userId], references: [id])
  Workout                        Workout?                        @relation(fields: [workoutId], references: [id])
  LoggedWorkoutSections          LoggedWorkoutSection[]
  ScheduledWorkout               ScheduledWorkout?
  WorkoutGoals                   WorkoutGoal[]
  CompletedWorkoutPlanDayWorkout CompletedWorkoutPlanDayWorkout?
}

model LoggedWorkoutSection {
  id                       String             @id @default(uuid())
  createdAt                DateTime           @default(now())
  loggedWorkoutId          String
  workoutSectionTypeId     String
  userId                   String
  name                     String?
  sortPosition             Int
  repScore                 Int?
  timeTakenSeconds         Int                @default(1800)
  loggedWorkoutSectionData Json?
  LoggedWorkout            LoggedWorkout      @relation(fields: [loggedWorkoutId], references: [id], onDelete: Cascade)
  User                     User               @relation(fields: [userId], references: [id])
  WorkoutSectionType       WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  BodyAreas                BodyArea[]
  MoveTypes                MoveType[]
}

//////////////////////////////////////////////
/////// Body Tracking Related ////////////////
//////////////////////////////////////////////
model BodyTrackingEntry {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  fatPercent     Float?
  bodyweight     Float?
  bodyweightUnit BodyweightUnit @default(KG)
  photoUris      String[]
  note           String?
  userId         String
  User           User           @relation(fields: [userId], references: [id])
}

/////////////////////////////////////
/////// Journal Related /////////////
/////////////////////////////////////
model JournalNote {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  voiceNoteUri String?
  textNote     String?
  User         User     @relation(fields: [userId], references: [id])
  userId       String
}

model JournalMood {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  moodScore   Int?
  energyScore Int?
  tags        String[]
  textNote    String?
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model JournalGoal {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  name          String
  description   String?
  deadline      DateTime?
  completedDate DateTime?
  User          User      @relation(fields: [userId], references: [id])
  userId        String
}

/// ///////////////////////////////
/// / ENUMS ///////////////////////
/// ///////////////////////////////
enum BenchmarkType {
  UNBROKENREPS
  UNBROKENTIME
  MAXLOAD
  FASTESTTIME
  AMRAP
}

enum BodyAreaFrontBack {
  BACK
  FRONT
  BOTH
}

enum BodyAreaUpperLower {
  CORE
  LOWER
  UPPER
}

enum BodyweightUnit {
  KG
  LB
}

enum ContentAccessScope {
  PUBLIC
  PRIVATE
}

enum DifficultyLevel {
  LIGHT
  CHALLENGING
  INTERMEDIATE
  ADVANCED
  ELITE
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  PNTS
}

enum HeightUnit {
  CM
  IN
}

enum JoinClubRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
  PERCENTMAX
}

enum MoveScope {
  STANDARD
  CUSTOM
}

enum TimeUnit {
  HOURS
  MINUTES
  SECONDS
}

enum WeightUnit {
  KG
  LB
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

enum WorkoutSetGeneratorTarget {
  REPS
  LOAD
}

enum WorkoutSetGeneratorType {
  LADDERUP
  LADDERDOWN
  PYRAMIDUP
  PYRAMIDDOWN
}

enum UserProfileScope {
  PRIVATE
  PUBLIC
}
