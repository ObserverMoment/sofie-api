generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Admin {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  createdAt   DateTime @default(now())
  username    String   @unique
}

/// ////////////////////////////////////
/// / Global / Core Data / Tags ////////
/// ////////////////////////////////////
/// From App Admin -> Users. Let them know about news, articles, announcements and app updates.
model AnnouncementUpdate {
  id              String                     @id @default(uuid())
  createdAt       DateTime                   @default(now())
  imageUri        String?
  videoUri        String?
  audioUri        String?
  articleUrl      String?
  title           String
  subtitle        String?
  bodyOne         String?
  bodyTwo         String?
  actions         AnnouncementUpdateAction[]
  UsersMarkedSeen User[]
}

/// Enables display of a 'text button' which lets the user navigate to somewhere in the app.
/// routeTo should be a string url that the navigator recognises.
model AnnouncementUpdateAction {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  text                 String
  routeTo              String
  AnnouncementUpdate   AnnouncementUpdate @relation(fields: [announcementUpdateId], references: [id], onDelete: Cascade)
  announcementUpdateId String
}

model BodyArea {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  name               String              @unique
  altNames           String?
  frontBack          BodyAreaFrontBack   @default(FRONT)
  upperLower         BodyAreaUpperLower  @default(UPPER)
  BodyAreaMoveScores BodyAreaMoveScore[]
}

model BodyAreaMoveScore {
  createdAt  DateTime @default(now())
  moveId     String
  bodyAreaId String
  score      Int      @default(1)
  BodyArea   BodyArea @relation(fields: [bodyAreaId], references: [id])
  Move       Move     @relation(fields: [moveId], references: [id], onDelete: Cascade)

  @@id([moveId, bodyAreaId])
}

model Equipment {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  name                     String                    @unique
  altNames                 String?
  loadAdjustable           Boolean                   @default(true)
  WorkoutMoves             WorkoutMove[]
  GymProfiles              GymProfile[]
  RequiredForMoves         Move[]                    @relation("moveToRequiredEquipments")
  SelectableForMoves       Move[]                    @relation("moveToSelectableEquipments")
  LoggedWorkoutMoves       LoggedWorkoutMove[]
  UserExerciseLoadTrackers UserExerciseLoadTracker[]
  ResistanceSets           ResistanceSet[]
  IntervalSets             IntervalSet[]
  AmrapMoves               AmrapMove[]
  ForTimeMoves             ForTimeMove[]
}

model Move {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  archived                 Boolean                   @default(false)
  scope                    MoveScope                 @default(CUSTOM)
  name                     String
  searchTerms              String?
  description              String?
  demoVideoUri             String?
  demoVideoThumbUri        String?
  moveTypeId               String?
  validRepTypes            WorkoutMoveRepType[]
  userId                   String?
  MoveType                 MoveType?                 @relation(fields: [moveTypeId], references: [id])
  User                     User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  BodyAreaMoveScores       BodyAreaMoveScore[]
  WorkoutMoves             WorkoutMove[]
  RequiredEquipments       Equipment[]               @relation("moveToRequiredEquipments")
  SelectableEquipments     Equipment[]               @relation("moveToSelectableEquipments")
  LoggedWorkoutMoves       LoggedWorkoutMove[]
  UserExerciseLoadTrackers UserExerciseLoadTracker[]
  CardioExercises          CardioExercise[]
  ResistanceSets           ResistanceSet[]
  IntervalSets             IntervalSet[]
  AmrapMoves               AmrapMove[]
  ForTimeMoves             ForTimeMove[]
}

model MoveType {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String?
  imageUri    String?
  Moves       Move[]
}

model MobilityMove {
  id                 String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  archived           Boolean           @default(false)
  scope              MoveScope         @default(CUSTOM)
  name               String
  searchTerms        String?
  description        String?
  demoVideoUri       String?
  demoVideoThumbUri  String?
  User               User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
  MobilityMoveType   MobilityMoveType? @relation(fields: [mobilityMoveTypeId], references: [id])
  mobilityMoveTypeId String?
  MobilitySessions   MobilitySession[]
}

// Flexibility, Yoga, Range of Motion
model MobilityMoveType {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  name          String
  description   String?
  imageUri      String?
  MobilityMoves MobilityMove[]
}

///////////////////////////////////////
//// Widgets and Customisable /////////
///////////////////////////////////////
// Core Data - read only by clients. Definitions for a set of pre-built but selectable widgets that the user can choose to display.
model ProgressWidget {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  subtitle    String?
  description String?
}

///////////////////////////////////////
//// User and User Related ////////////
///////////////////////////////////////
model GymProfile {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  name                     String
  description              String?
  userId                   String
  User                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  LoggedWorkouts           LoggedWorkout[]
  ScheduledWorkouts        ScheduledWorkout[]
  Equipments               Equipment[]
  ScheduledWorkoutSessions ScheduledWorkoutSession[]
  LoggedWorkoutSessions    LoggedWorkoutSession[]
}

model ScheduledWorkoutSession {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  scheduledAt              DateTime                @default(now())
  note                     String?
  GymProfile               GymProfile?             @relation(fields: [gymProfileId], references: [id])
  gymProfileId             String?
  LoggedWorkoutSession     LoggedWorkoutSession?   @relation(fields: [loggedWorkoutSessionId], references: [id])
  loggedWorkoutSessionId   String?                 @unique
  User                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  WorkoutSession           WorkoutSession?         @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId         String?
  TrainingPlanEnrolment    TrainingPlanEnrolment?  @relation(fields: [trainingPlanEnrolmentId], references: [id])
  trainingPlanEnrolmentId  String?
  TrainingPlanDayWorkout   TrainingPlanDayWorkout? @relation(fields: [trainingPlanDayWorkoutId], references: [id])
  trainingPlanDayWorkoutId String?
}

model Skill {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  experience     String?
  certification  String?
  awardingBody   String?
  certificateRef String? // Official reference that people can check to validate the cert.
  documentUri    String?
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model User {
  id                            String                         @id @default(uuid())
  firebaseUid                   String                         @unique
  createdAt                     DateTime                       @default(now())
  hasOnboarded                  Boolean                        @default(false)
  userProfileScope              UserProfileScope               @default(PRIVATE)
  avatarUri                     String?
  introVideoUri                 String?
  introVideoThumbUri            String?
  displayName                   String                         @unique
  firstname                     String?
  lastname                      String?
  bio                           String?
  tagline                       String?
  birthdate                     DateTime?
  gender                        Gender                         @default(PNTS)
  townCity                      String?
  countryCode                   String?
  instagramHandle               String?
  tiktokHandle                  String?
  youtubeHandle                 String?
  linkedinHandle                String?
  // Ids of widgets that the user has added / enabled on the client (Progress page)
  // The sort order of these Ids determines the position that the widgets sit on the screen
  activeProgressWidgets         String[]
  // Ids of benchmarks that the user wants to see in their Benchmarks dashboard
  activeFitnessBenchmarks       String[]
  // Log / Streak tracking settings.
  workoutsPerWeekTarget         Int                            @default(3)
  // Object ids in the format [type:id]. Max of 20 (?). See [Utils.addObjectToUserRecentlyViewed].
  recentlyViewedObjects         String[]
  // When user marks as seen / got it / don't show again we add to here.
  SeenAnnouncementUpdates       AnnouncementUpdate[]
  // When user marks as seen / got it / don't show again we add to here.
  SeenWelcomeTodoItems          WelcomeTodoItem[]
  ClubsWhereOwner               Club[]                         @relation("owner")
  ClubInviteTokens              ClubInviteToken[]
  Collections                   Collection[]
  GymProfiles                   GymProfile[]
  LoggedWorkouts                LoggedWorkout[]
  LoggedWorkoutSections         LoggedWorkoutSection[]
  CustomMoves                   Move[]
  ScheduledWorkouts             ScheduledWorkout[]
  Skills                        Skill[]
  Workouts                      Workout[]
  WorkoutMoves                  WorkoutMove[]
  WorkoutPlans                  WorkoutPlan[]
  WorkoutPlanDays               WorkoutPlanDay[]
  WorkoutPlanDayWorkouts        WorkoutPlanDayWorkout[]
  WorkoutPlanEnrolments         WorkoutPlanEnrolment[]
  WorkoutPlanReviews            WorkoutPlanReview[]
  WorkoutSections               WorkoutSection[]
  WorkoutSets                   WorkoutSet[]
  WorkoutTag                    WorkoutTag[]
  ClubsWhereAdmin               Club[]                         @relation("admin")
  ClubsWhereMember              Club[]                         @relation("member")
  BodyTrackingEntry             BodyTrackingEntry[]
  /// NOTE: These loggedWorkout sub fields should be plural.
  /// TODO: Rename them without dropping data.
  LoggedWorkoutSet              LoggedWorkoutSet[]
  LoggedWorkoutMove             LoggedWorkoutMove[]
  ClubMemberNotesAsAuthor       ClubMemberNote[]               @relation("note_author")
  ClubMemberNotesAsMember       ClubMemberNote[]               @relation("note_member")
  UserDayLogMoods               UserDayLogMood[]
  UserGoals                     UserGoal[]
  UserMeditationLogs            UserMeditationLog[]
  UserEatWellLogs               UserEatWellLog[]
  UserSleepWellLogs             UserSleepWellLog[]
  UserExerciseLoadTrackers      UserExerciseLoadTracker[]
  FitnessBenchmarks             FitnessBenchmark[]
  FitnessBenchmarkScores        FitnessBenchmarkScore[]
  FitnessBenchmarkWorkouts      FitnessBenchmarkWorkout[]
  FitnessBenchmarkWorkoutScores FitnessBenchmarkWorkoutScore[]
  MobilityMoves                 MobilityMove[]
  WorkoutSessions               WorkoutSession[]
  CardioSessions                CardioSession[]
  CardioExercises               CardioExercise[]
  ResistanceSessions            ResistanceSession[]
  ResistanceExercises           ResistanceExercise[]
  ResistanceSets                ResistanceSet[]
  IntervalSessions              IntervalSession[]
  IntervalExercises             IntervalExercise[]
  IntervalSets                  IntervalSet[]
  AmrapSessions                 AmrapSession[]
  AmrapSections                 AmrapSection[]
  AmrapMoves                    AmrapMove[]
  ForTimeSessions               ForTimeSession[]
  ForTimeSections               ForTimeSection[]
  ForTimeMoves                  ForTimeMove[]
  MobilitySessions              MobilitySession[]
  ScheduledWorkoutSessions      ScheduledWorkoutSession[]
  LoggedWorkoutSessions         LoggedWorkoutSession[]
  TrainingPlans                 TrainingPlan[]
  TrainingPlanDays              TrainingPlanDay[]
  TrainingPlanDayWorkouts       TrainingPlanDayWorkout[]
  TrainingPlanEnrolments        TrainingPlanEnrolment[]
  TrainingPlanReviews           TrainingPlanReview[]
}

model Collection {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  description     String?
  name            String
  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workouts        Workout[]
  WorkoutPlans    WorkoutPlan[]
  WorkoutSessions WorkoutSession[]
  TrainingPlan    TrainingPlan[]
}

////////////////////////////////////////////////
///// Club Related Models and Children /////////
////////////////////////////////////////////////
model Club {
  id                 String                        @id @default(uuid())
  createdAt          DateTime                      @default(now())
  name               String                        @unique
  description        String?
  location           String?
  coverImageUri      String?
  introVideoUri      String?
  introVideoThumbUri String?
  introAudioUri      String?
  contentAccessScope ContentAccessScope            @default(PRIVATE)
  Owner              User                          @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  ClubInviteTokens   ClubInviteToken[]
  Admins             User[]                        @relation("admin")
  Members            User[]                        @relation("member")
  ClubMemberNotes    ClubMemberNote[]
  Workouts           Workout[]
  WorkoutPlans       WorkoutPlan[]
  /// New models May 2022
  WorkoutSessions    WorkoutSession[]
  TrainingPlan       TrainingPlan[]
  ////// Admin access only - meta data //////
  validated          PublicContentValidationStatus @default(VALID) // For public display
  reasonNotValidated String?
  metaTags           String[]
}

/// Only owners or admins of the club should be able to CRUD.
model ClubMemberNote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      String
  tags      String[]
  // Must be 'User' because this is the standard way of checking ownership when protecting CRUD ops. The check is always [object.userId == authedUserId].
  User      User     @relation("note_author", fields: [userId], references: [id], onDelete: SetNull)
  userId    String
  // Cascade because we should not keep notes about users that have left the app.
  Member    User     @relation("note_member", fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  Club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    String
}

model ClubInviteToken {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  active        Boolean
  inviteLimit   Int      @default(0)
  clubId        String
  joinedUserIds String[]
  userId        String
  name          String
  Club          Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [userId], references: [id])
}

/////////////////////////////////////////////////////
////// Workout V2 Related Models and Children ///////
/////////////////////////////////////////////////////
model WorkoutSession {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  name               String
  description        String?
  introVideoUri      String?
  introAudioUri      String?
  coverImageUri      String?
  introVideoThumbUri String?
  archived           Boolean             @default(false)
  sessionOrder       String[] // Session IDs.
  CardioSessions     CardioSession[] // Monostructural, zones 2 (steady state) -> 5
  ResistanceSessions ResistanceSession[] // Strength, hypertrophy, muscle endurance.
  IntervalSessions   IntervalSession[] // HIIT, Tabata
  MobilitySessions   MobilitySession[] // Yoga, ROM, Flexibility, Stability.
  AmrapSessions      AmrapSession[] // Scored
  ForTimeSessions    ForTimeSession[] // Scored
  User               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  ////// Admin access only - admin / search / app level meta data //////
  metaTags                 String[]
  difficultyLevel          DifficultyLevel?
  Club                     Club?                     @relation(fields: [clubId], references: [id])
  clubId                   String?
  ScheduledWorkoutSessions ScheduledWorkoutSession[]
  LoggedWorkoutSessions    LoggedWorkoutSession[]
  TrainingPlanDayWorkouts  TrainingPlanDayWorkout[]
  Collections              Collection[]
}

model CardioSession {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String?
  note             String?
  exerciseOrder    String[]
  CardioExercises  CardioExercise[]
  WorkoutSession   WorkoutSession   @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String
  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model CardioExercise {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  note            String?
  time            Float?
  timeUnit        TimeUnit      @default(SECONDS)
  distance        Float?
  distanceUnit    DistanceUnit  @default(METRES)
  cardioZone      CardioZone
  Move            Move          @relation(fields: [moveId], references: [id])
  moveId          String
  CardioSession   CardioSession @relation(fields: [cardioSessionId], references: [id])
  cardioSessionId String
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

model ResistanceSession {
  id                  String               @id @default(uuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String?
  note                String?
  setOrder            String[]
  ResistanceExercises ResistanceExercise[]
  WorkoutSession      WorkoutSession       @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId    String
  User                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
}

model ResistanceExercise {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  note                String?
  setOrder            String[]
  ResistanceSets      ResistanceSet[]
  ResistanceSession   ResistanceSession @relation(fields: [resistanceSessionId], references: [id])
  resistanceSessionId String
  User                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
}

model ResistanceSet {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  note                 String?
  reps                 Int
  Move                 Move               @relation(fields: [moveId], references: [id])
  moveId               String
  Equipment            Equipment?         @relation(fields: [equipmentId], references: [id])
  equipmentId          String?
  ResistanceExercise   ResistanceExercise @relation(fields: [resistanceExerciseId], references: [id])
  resistanceExerciseId String
  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
}

model IntervalSession {
  id                    String             @id @default(uuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  name                  String?
  note                  String?
  repeats               Int                @default(1) // Run through all exercises this many times
  // For rest intervals add 'rest' to the array.
  // E.g. [IntervalExerciseId, IntervalExerciseId, rest, IntervalExerciseId, IntervalExerciseId, rest]
  intervalExerciseOrder String[]
  // Align with setOrder. Interval length in seconds.
  // E.g [60, 60, 30, 60, 60, 30]
  intervals             Int[]
  IntervalExercises     IntervalExercise[]
  WorkoutSession        WorkoutSession     @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId      String
  User                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
}

model IntervalExercise {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  note              String?
  intervalSetOrder  String[]
  IntervalSets      IntervalSet[]
  IntervalSession   IntervalSession @relation(fields: [intervalSessionId], references: [id])
  intervalSessionId String
  User              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}

model IntervalSet {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  note               String?
  Move               Move             @relation(fields: [moveId], references: [id])
  moveId             String
  Equipment          Equipment?       @relation(fields: [equipmentId], references: [id])
  equipmentId        String?
  IntervalExercise   IntervalExercise @relation(fields: [intervalExerciseId], references: [id])
  intervalExerciseId String
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
}

model AmrapSession {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String?
  note             String?
  /// If forced rests are required between sections then add [rest:seconds].
  /// [AMRAPSectionId, rest:60, AMRAPSection]
  sectionOrder     String[]
  AmrapSections    AmrapSection[]
  WorkoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model AmrapSection {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  note           String?
  moveOrder      String[]
  AmrapMoves     AmrapMove[]
  AmrapSession   AmrapSession @relation(fields: [amrapSessionId], references: [id])
  amrapSessionId String
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model AmrapMove {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  note           String?
  Move           Move         @relation(fields: [moveId], references: [id])
  moveId         String
  Equipment      Equipment?   @relation(fields: [equipmentId], references: [id])
  equipmentId    String?
  AmrapSection   AmrapSection @relation(fields: [amrapSectionId], references: [id])
  amrapSectionId String
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model ForTimeSession {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String?
  note             String?
  repeats          Int              @default(1) // Repeat the whole thing x times
  timecapSeconds   Int              @default(0) // 0 is no timecap
  /// If forced rests are required between sections then add [rest:seconds].
  /// [ForTimeSectionId, rest:60, ForTimeSectionId]
  sectionOrder     String[]
  ForTimeSections  ForTimeSection[]
  WorkoutSession   WorkoutSession   @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String
  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model ForTimeSection {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String?
  note             String?
  moveOrder        String[]
  ForTimeMoves     ForTimeMove[]
  ForTimeSession   ForTimeSession @relation(fields: [forTimeSessionId], references: [id])
  forTimeSessionId String
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model ForTimeMove {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  note             String?
  Move             Move           @relation(fields: [moveId], references: [id])
  moveId           String
  Equipment        Equipment?     @relation(fields: [equipmentId], references: [id])
  equipmentId      String?
  ForTimeSection   ForTimeSection @relation(fields: [forTimeSectionId], references: [id])
  forTimeSectionId String
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model MobilitySession {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String?
  note             String?
  moveOrder        String[]
  MobilityMoves    MobilityMove[]
  WorkoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

///////////////////////////////////////
/////// Logged Workout Session ////////
///////////////////////////////////////
model LoggedWorkoutSession {
  id                              String                           @id @default(uuid())
  createdAt                       DateTime                         @default(now())
  completedOn                     DateTime
  name                            String
  note                            String?
  GymProfile                      GymProfile?                      @relation(fields: [gymProfileId], references: [id])
  gymProfileId                    String?
  User                            User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                          String
  WorkoutSession                  WorkoutSession?                  @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId                String?
  ScheduledWorkoutSession         ScheduledWorkoutSession?
  CompletedTrainingPlanDayWorkout CompletedTrainingPlanDayWorkout?
}

//////////////////////////////
/////// Training Plan ////////
//////////////////////////////
model TrainingPlan {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  archived               Boolean                 @default(false)
  name                   String
  description            String?
  coverImageUri          String?
  introVideoUri          String?
  introVideoThumbUri     String?
  introAudioUri          String?
  lengthWeeks            Int                     @default(2)
  daysPerWeek            Int                     @default(3)
  User                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  TrainingPlanDays       TrainingPlanDay[]
  TrainingPlanEnrolments TrainingPlanEnrolment[]
  TrainingPlanReviews    TrainingPlanReview[]
  Clubs                  Club[]
  Collections            Collection[]
  WorkoutTags            WorkoutTag[]
  ////// Admin access only - meta data //////
  metaTags               String[]
  difficultyLevel        DifficultyLevel?
}

model TrainingPlanDay {
  id                      String                   @id @default(uuid())
  createdAt               DateTime                 @default(now())
  note                    String?
  dayNumber               Int
  User                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  TrainingPlan            TrainingPlan             @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId          String
  TrainingPlanDayWorkouts TrainingPlanDayWorkout[]
}

model TrainingPlanDayWorkout {
  id                               String                            @id @default(uuid())
  createdAt                        DateTime                          @default(now())
  note                             String?
  sortPosition                     Int
  User                             User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                           String
  WorkoutSession                   WorkoutSession                    @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  workoutSessionId                 String
  TrainingPlanDay                  TrainingPlanDay                   @relation(fields: [trainingPlanDayId], references: [id], onDelete: Cascade)
  trainingPlanDayId                String
  CompletedTrainingPlanDayWorkouts CompletedTrainingPlanDayWorkout[]
  ScheduledWorkoutSessions         ScheduledWorkoutSession[]
}

model TrainingPlanEnrolment {
  id                               String                            @id @default(uuid())
  createdAt                        DateTime                          @default(now())
  startDate                        DateTime?
  User                             User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                           String
  TrainingPlan                     TrainingPlan                      @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId                   String
  ScheduledWorkoutSessions         ScheduledWorkoutSession[]
  CompletedTrainingPlanDayWorkouts CompletedTrainingPlanDayWorkout[]
}

model CompletedTrainingPlanDayWorkout {
  id                       String                 @id @default(uuid())
  createdAt                DateTime               @default(now())
  TrainingPlanDayWorkout   TrainingPlanDayWorkout @relation(fields: [trainingPlanDayWorkoutId], references: [id], onDelete: Cascade)
  trainingPlanDayWorkoutId String
  LoggedWorkoutSession     LoggedWorkoutSession?  @relation(fields: [loggedWorkoutSessionId], references: [id])
  loggedWorkoutSessionId   String?                @unique
  TrainingPlanEnrolment    TrainingPlanEnrolment  @relation(fields: [trainingPlanEnrolmentId], references: [id], onDelete: Cascade)
  trainingPlanEnrolmentId  String
}

model TrainingPlanReview {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  score          Float
  comment        String?
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  TrainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId String
}

//////////////////////////////////////////////
//// Fitness Tests and Benchmark Workouts ////
//////////////////////////////////////////////
/// https://www.topendsports.com/testing/tests.htm
/// https://www.topendsports.com/citations.htm
model FitnessBenchmarkCategory {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  name              String
  description       String
  FitnessBenchmarks FitnessBenchmark[]
}

enum FitnessBenchmarkScope {
  STANDARD // In-built
  CUSTOM // User defined
}

enum FitnessBenchmarkScoreType {
  // ms. 100m sprint. WorkoutMoveRepType == DISTANCE
  // Implementation: Stopwatch Timer + input
  FASTESTTIMEDISTANCE
  // ms. 100 burpees. WorkoutMoveRepType == REPS
  // Implementation: Stopwatch Timer + input
  // AKA ForTime
  FASTESTTIMEREPS
  // m. Standing Broad Jump. Farmers Carry. WorkoutMoveRepType == NA / IGNORED
  // Implementation: Distance Input
  LONGESTDISTANCE
  // kg. 1 rep bench press. WorkoutMoveRepType == REPS
  // Implementation: Load Input
  MAXLOAD
  // 2 minute air squat. WorkoutMoveRepType == TIME
  // Implementation: Countdown Timer + Reps Input
  // AKA AMRAP
  TIMEDMAXREPS
  // max unbroken pull ups. WorkoutMoveRepType == REPS
  // Implementation: Reps Input
  UNBROKENMAXREPS
  // ms plank hold. WorkoutMoveRepType == TIME
  // Implementation: Stopwatch Timer + input
  UNBROKENMAXTIME
}

model FitnessBenchmark {
  id                         String                    @id @default(uuid())
  createdAt                  DateTime                  @default(now())
  scope                      FitnessBenchmarkScope
  type                       FitnessBenchmarkScoreType
  name                       String
  description                String?
  instructions               String?
  instructionalVideoUri      String?
  instructionalVideoThumbUri String?
  FitnessBenchmarkCategory   FitnessBenchmarkCategory  @relation(fields: [fitnessBenchmarkCategoryId], references: [id], onDelete: Cascade)
  fitnessBenchmarkCategoryId String
  // Must not be null when FitnessBenchmarkScope == CUSTOM.
  User                       User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String?
  FitnessBenchmarkScores     FitnessBenchmarkScore[]
}

model FitnessBenchmarkScore {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  completedOn        DateTime         @default(now())
  // Units that this represents depends on FitnessBenchmarkScoreType.
  score              Float
  note               String?
  videoUri           String?
  videoThumbUri      String?
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  FitnessBenchmark   FitnessBenchmark @relation(fields: [fitnessBenchmarkId], references: [id], onDelete: Cascade)
  fitnessBenchmarkId String
}

//////////////////////////////////////////////
/////// Body Tracking Related ////////////////
//////////////////////////////////////////////
model BodyTrackingEntry {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  fatPercent     Float?
  bodyweight     Float?
  bodyweightUnit BodyweightUnit @default(KG)
  photoUris      String[]
  note           String?
  userId         String
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/////////////////////////////////////
/////// Day Tracking Related ////////
/////////////////////////////////////
model UserDayLogMood {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  moodScore   Int
  energyScore Int
  tags        String[]
  note        String?
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model UserGoal {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String?
  deadline      DateTime?
  completedDate DateTime?
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model UserMeditationLog {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  year          Int
  dayNumber     Int // Jan 1st is day 1
  minutesLogged Int      @default(0)
  note          String?
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  // One entry per user per day.

  @@unique([year, dayNumber, userId])
}

model UserEatWellLog {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  year      Int
  dayNumber Int // Jan 1st is day 1
  rating    UserDayLogRating
  note      String?
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  // One entry per user per day.

  @@unique([year, dayNumber, userId])
}

model UserSleepWellLog {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  year         Int
  dayNumber    Int // Jan 1st is day 1
  rating       UserDayLogRating
  minutesSlept Int?
  note         String?
  User         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  // One entry per user per day.

  @@unique([year, dayNumber, userId])
}

//////////////////////////////////
//// ENUMS ///////////////////////
//////////////////////////////////
enum BodyAreaFrontBack {
  BACK
  FRONT
  BOTH
}

enum BodyAreaUpperLower {
  CORE
  LOWER
  UPPER
}

enum BodyweightUnit {
  KG
  LB
}

enum CardioZone {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum ContentAccessScope {
  PUBLIC
  PRIVATE
}

enum DifficultyLevel {
  LIGHT
  CHALLENGING
  INTERMEDIATE
  ADVANCED
  ELITE
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  PNTS
}

enum HeightUnit {
  CM
  IN
}

enum JoinClubRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
  PERCENTMAX
}

enum MoveScope {
  STANDARD
  CUSTOM
}

enum PublicContentValidationStatus {
  VALID
  INVALID
  PENDINGUPDATED // Set to this status when an already validated
  PENDING
}

enum TimeUnit {
  HOURS
  MINUTES
  SECONDS
}

enum UserDayLogRating {
  GOOD
  AVERAGE
  BAD
}

enum WeightUnit {
  KG
  LB
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

enum WorkoutSetGeneratorTarget {
  REPS
  LOAD
}

enum WorkoutSetGeneratorType {
  LADDERUP
  LADDERDOWN
  PYRAMIDUP
  PYRAMIDDOWN
}

enum UserProfileScope {
  PRIVATE
  PUBLIC
}

//////////////////////////////////////////////////////
////// DEPRECATED: TO BE REMOVED AFTER MIGRATION /////
//////////////////////////////////////////////////////
enum FitnessBenchmarkWorkoutScoreType {
  AMRAP
  FORTIME
}

model FitnessBenchmarkWorkout {
  id                            String                           @id @default(uuid())
  createdAt                     DateTime                         @default(now())
  scope                         FitnessBenchmarkScope
  type                          FitnessBenchmarkWorkoutScoreType
  name                          String
  description                   String?
  instructions                  String?
  instructionalVideoUri         String?
  instructionalVideoThumbUri    String?
  // Must be 1 for AMRAPS. Can be > 1 for FORTIME.
  rounds                        Int                              @default(1)
  // E.g. [10 calories air bike, 20m forward lunge, 10 muscle snatch, 10 air squats]
  // Must be same length as pointsForMoveCompleted[]
  moveDescriptions              String[]
  // E.g. [10, 5, 10, 10]
  // Must be same length as moveDescriptions[]
  pointsForMoveCompleted        Int[]
  // Must not be null when FitnessBenchmarkScope == CUSTOM.
  User                          User?                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                        String?
  FitnessBenchmarkWorkoutScores FitnessBenchmarkWorkoutScore[]
}

model FitnessBenchmarkWorkoutScore {
  id                        String                  @id @default(uuid())
  createdAt                 DateTime                @default(now())
  completedOn               DateTime                @default(now())
  // If AMRAP, this is REPS. If FORTIME, this is ms.
  score                     Int
  note                      String?
  FitnessBenchmarkWorkout   FitnessBenchmarkWorkout @relation(fields: [fitnessBenchmarkWorkoutId], references: [id], onDelete: Cascade)
  fitnessBenchmarkWorkoutId String
  User                      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
}

/// /////////////////////////////////////////////////
/// // Workout Related Models and Children //////////
/// /////////////////////////////////////////////////
model Workout {
  id                    String                        @id @default(uuid())
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  name                  String
  description           String?
  introVideoUri         String?
  introAudioUri         String?
  coverImageUri         String?
  contentAccessScope    ContentAccessScope            @default(PRIVATE)
  userId                String
  introVideoThumbUri    String?
  archived              Boolean                       @default(false)
  lengthMinutes         Int?
  metaData              Json? /// Meta data about the content of the workout.
  User                  User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  LoggedWorkouts        LoggedWorkout[]
  ScheduledWorkouts     ScheduledWorkout[]
  WorkoutPlanDayWorkout WorkoutPlanDayWorkout[]
  WorkoutSections       WorkoutSection[]
  Clubs                 Club[]
  Collections           Collection[]
  WorkoutGoals          WorkoutGoal[]
  WorkoutTags           WorkoutTag[]
  ////// Admin access only - admin / search / app level meta data //////
  validated             PublicContentValidationStatus @default(PENDING) // For public display
  reasonNotValidated    String?
  metaTags              String[]
  difficultyLevel       DifficultyLevel?
}

/// Used on both workouts and workout plans + maybe others (events, challenges) in the future. Free text tag for the USER to tag their content. Difrerent from the meta tags, which are added by admins only.
model WorkoutTag {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  userId         String
  tag            String
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutPlans   WorkoutPlan[]
  Workouts       Workout[]
  TrainingPlan   TrainingPlan? @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId String?
}

model WorkoutSection {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  sortPosition         Int
  introVideoUri        String?
  introAudioUri        String?
  classAudioUri        String?
  workoutId            String
  name                 String?
  classVideoUri        String?
  introVideoThumbUri   String?
  workoutSectionTypeId String
  classVideoThumbUri   String?
  rounds               Int                @default(1)
  userId               String
  archived             Boolean            @default(false)
  note                 String?
  timecap              Int                @default(0)
  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workout              Workout            @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  WorkoutSectionType   WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  WorkoutSets          WorkoutSet[]
}

model WorkoutSet {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  sortPosition     Int
  workoutSectionId String
  userId           String
  duration         Int            @default(60)
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutSection   WorkoutSection @relation(fields: [workoutSectionId], references: [id], onDelete: Cascade)
  WorkoutMoves     WorkoutMove[]
}

model WorkoutMove {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  sortPosition Int
  repType      WorkoutMoveRepType
  reps         Float
  distanceUnit DistanceUnit       @default(METRES)
  loadAmount   Float              @default(0)
  loadUnit     LoadUnit           @default(KG)
  moveId       String
  equipmentId  String?
  workoutSetId String
  userId       String
  timeUnit     TimeUnit           @default(SECONDS)
  Equipment    Equipment?         @relation(fields: [equipmentId], references: [id])
  Move         Move               @relation(fields: [moveId], references: [id], onDelete: Cascade)
  User         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutSet   WorkoutSet         @relation(fields: [workoutSetId], references: [id], onDelete: Cascade)
}

/// ////////////////////////////////////////
/// // Workout Plan Related Models /////////
/// ////////////////////////////////////////
model WorkoutPlan {
  id                    String                        @id @default(uuid())
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  archived              Boolean                       @default(false)
  name                  String
  description           String?
  coverImageUri         String?
  introVideoUri         String?
  introVideoThumbUri    String?
  introAudioUri         String?
  contentAccessScope    ContentAccessScope            @default(PRIVATE)
  userId                String
  lengthWeeks           Int                           @default(2)
  daysPerWeek           Int                           @default(3)
  User                  User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutPlanDays       WorkoutPlanDay[]
  WorkoutPlanEnrolments WorkoutPlanEnrolment[]
  WorkoutPlanReviews    WorkoutPlanReview[]
  Clubs                 Club[]
  Collections           Collection[]
  WorkoutTags           WorkoutTag[]
  ////// Admin access only - meta data //////
  validated             PublicContentValidationStatus @default(PENDING) // For public display
  reasonNotValidated    String?
  metaTags              String[]
  difficultyLevel       DifficultyLevel?
}

model WorkoutPlanDay {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  note                   String?
  dayNumber              Int
  workoutPlanId          String
  userId                 String
  User                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutPlan            WorkoutPlan             @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  WorkoutPlanDayWorkouts WorkoutPlanDayWorkout[]
}

model WorkoutPlanDayWorkout {
  id                              String                           @id @default(uuid())
  createdAt                       DateTime                         @default(now())
  note                            String?
  sortPosition                    Int
  workoutId                       String
  workoutPlanDayId                String
  userId                          String
  User                            User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workout                         Workout                          @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  WorkoutPlanDay                  WorkoutPlanDay                   @relation(fields: [workoutPlanDayId], references: [id], onDelete: Cascade)
  CompletedWorkoutPlanDayWorkouts CompletedWorkoutPlanDayWorkout[]
  ScheduledWorkouts               ScheduledWorkout[]
}

model WorkoutPlanEnrolment {
  id                              String                           @id @default(uuid())
  createdAt                       DateTime                         @default(now())
  startDate                       DateTime?
  userId                          String
  workoutPlanId                   String
  User                            User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutPlan                     WorkoutPlan                      @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  ScheduledWorkouts               ScheduledWorkout[]
  CompletedWorkoutPlanDayWorkouts CompletedWorkoutPlanDayWorkout[]
}

model CompletedWorkoutPlanDayWorkout {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  WorkoutPlanDayWorkout   WorkoutPlanDayWorkout @relation(fields: [workoutPlanDayWorkoutId], references: [id], onDelete: Cascade)
  workoutPlanDayWorkoutId String
  LoggedWorkout           LoggedWorkout?        @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId         String?               @unique
  WorkoutPlanEnrolment    WorkoutPlanEnrolment  @relation(fields: [workoutPlanEnrolmentId], references: [id], onDelete: Cascade)
  workoutPlanEnrolmentId  String
}

model WorkoutPlanReview {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  score         Float
  comment       String?
  workoutPlanId String
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
}

/// ///////////////////////////////////////////////////////
/// // Logged Workout Related Models and Children /////////
/// ///////////////////////////////////////////////////////
model LoggedWorkout {
  id                             String                          @id @default(uuid())
  createdAt                      DateTime                        @default(now())
  completedOn                    DateTime
  userId                         String
  name                           String
  workoutId                      String?
  note                           String?
  gymProfileId                   String?
  GymProfile                     GymProfile?                     @relation(fields: [gymProfileId], references: [id])
  User                           User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workout                        Workout?                        @relation(fields: [workoutId], references: [id])
  LoggedWorkoutSections          LoggedWorkoutSection[]
  ScheduledWorkout               ScheduledWorkout?
  WorkoutGoals                   WorkoutGoal[]
  CompletedWorkoutPlanDayWorkout CompletedWorkoutPlanDayWorkout?
}

model LoggedWorkoutSection {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  loggedWorkoutId      String
  workoutSectionTypeId String
  userId               String
  name                 String?
  sortPosition         Int
  repScore             Int?
  timeTakenSeconds     Int                @default(1800)
  LoggedWorkout        LoggedWorkout      @relation(fields: [loggedWorkoutId], references: [id], onDelete: Cascade)
  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutSectionType   WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  LoggedWorkoutSets    LoggedWorkoutSet[]
}

model LoggedWorkoutSet {
  id                     String               @id @default(uuid())
  createdAt              DateTime             @default(now())
  sectionRoundNumber     Int
  sortPosition           Int                  @default(0) /// TODO: Remove this default once migration to production is completed.
  timeTakenSeconds       Int?
  LoggedWorkoutSection   LoggedWorkoutSection @relation(fields: [loggedWorkoutSectionId], references: [id], onDelete: Cascade)
  loggedWorkoutSectionId String
  LoggedWorkoutMoves     LoggedWorkoutMove[]
  User                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
}

model LoggedWorkoutMove {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  sortPosition       Int
  repType            WorkoutMoveRepType
  reps               Float
  distanceUnit       DistanceUnit       @default(METRES)
  loadAmount         Float              @default(0)
  loadUnit           LoadUnit           @default(KG)
  timeUnit           TimeUnit           @default(SECONDS)
  Equipment          Equipment?         @relation(fields: [equipmentId], references: [id])
  equipmentId        String?
  Move               Move               @relation(fields: [moveId], references: [id], onDelete: Cascade)
  moveId             String
  LoggedWorkoutSet   LoggedWorkoutSet   @relation(fields: [loggedWorkoutSetId], references: [id], onDelete: Cascade)
  loggedWorkoutSetId String
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
}

/// Items for new users to do / dismiss when they first start using the app.
/// Tapping the list either routes to a new page or opens a video.
model WelcomeTodoItem {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  videoUri        String?
  routeTo         String?
  title           String
  UsersMarkedSeen User[]
}

model WorkoutSectionType {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  name                  String
  subtitle              String
  description           String
  validRepTypes         WorkoutMoveRepType[]
  LoggedWorkoutSections LoggedWorkoutSection[]
  WorkoutSections       WorkoutSection[]
}

/// Replace with functionality to access this via the MoveInfo page by clicking ANY move.
/// Parses Log History and displays a graph of load over time for specified moves ////
/// No manual entry or scoring input from user - user fitness test benchmarks for this ///
model UserExerciseLoadTracker {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  reps        Int
  loadUnit    LoadUnit   @default(KG)
  Move        Move       @relation(fields: [moveId], references: [id])
  moveId      String
  Equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  equipmentId String?
}

model ScheduledWorkout {
  id                      String                 @id @default(uuid())
  createdAt               DateTime               @default(now())
  userId                  String
  scheduledAt             DateTime               @default(now())
  workoutId               String?
  loggedWorkoutId         String?                @unique
  gymProfileId            String?
  note                    String?
  workoutPlanEnrolmentId  String?
  GymProfile              GymProfile?            @relation(fields: [gymProfileId], references: [id])
  LoggedWorkout           LoggedWorkout?         @relation(fields: [loggedWorkoutId], references: [id])
  User                    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workout                 Workout?               @relation(fields: [workoutId], references: [id])
  WorkoutPlanEnrolment    WorkoutPlanEnrolment?  @relation(fields: [workoutPlanEnrolmentId], references: [id])
  WorkoutPlanDayWorkout   WorkoutPlanDayWorkout? @relation(fields: [workoutPlanDayWorkoutId], references: [id])
  workoutPlanDayWorkoutId String?
}

model WorkoutGoal {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  name           String
  description    String
  hexColor       String
  LoggedWorkouts LoggedWorkout[]
  Workouts       Workout[]
}
