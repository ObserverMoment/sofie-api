// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  createdAt   DateTime @default(now())
  username    String   @unique
}

///////////////////////////////////////
//// Global / Core Data ///////////////
///////////////////////////////////////
model BodyArea {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  name               String              @unique
  altNames           String?
  BodyAreaMoveScores BodyAreaMoveScore[]
  frontBack          BodyAreaFrontBack   @default(FRONT)
  upperLower         BodyAreaUpperLower  @default(UPPER)
}

model BodyAreaMoveScore {
  createdAt  DateTime @default(now())
  Move       Move     @relation(fields: [moveId], references: [id])
  moveId     String
  BodyArea   BodyArea @relation(fields: [bodyAreaId], references: [id])
  bodyAreaId String
  score      Int      @default(1)

  @@id([moveId, bodyAreaId])
}

model Equipment {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  name               String              @unique
  altNames           String?
  imageUrl           String?
  loadAdjustable     Boolean             @default(true)
  RequiredForMoves   Move[]              @relation("moveToRequiredEquipments", references: [id])
  SelectableForMoves Move[]              @relation("moveToSelectableEquipments", references: [id])
  WorkoutMoves       WorkoutMove[]
  GymProfiles        GymProfile[]
  UserBenchmarks     UserBenchmark[]
  LoggedWorkoutMoves LoggedWorkoutMove[]
}

model Move {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  archived             Boolean              @default(false)
  User                 User?                @relation(fields: [userId], references: [id])
  userId               String?
  // A user should never be able to create a STANDARD move (aka an official move), only ADMIN.
  scope                MoveScope            @default(CUSTOM)
  name                 String
  searchTerms          String?
  description          String?
  demoVideoUri         String?
  demoVideoThumbUri    String?
  validRepTypes        WorkoutMoveRepType[]
  MoveType             MoveType?            @relation(fields: [moveTypeId], references: [id])
  moveTypeId           String?
  RequiredEquipments   Equipment[]          @relation("moveToRequiredEquipments", references: [id])
  SelectableEquipments Equipment[]          @relation("moveToSelectableEquipments", references: [id])
  WorkoutMoves         WorkoutMove[]
  BodyAreaMoveScores   BodyAreaMoveScore[]
  UserBenchmarks       UserBenchmark[]
  LoggedWorkoutMove    LoggedWorkoutMove[]
}

// General, Cardio, Barre, Yoga etc
model MoveType {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String?
  imageUri    String?
  Moves       Move[]
}

model WorkoutGoal {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  name            String
  description     String
  imageUri        String?
  Workouts        Workout[]
  WorkoutPrograms WorkoutProgram[]
}

model WorkoutSectionType {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  name                  String
  subtitle              String
  description           String
  imageUri              String?
  validRepTypes         WorkoutMoveRepType[]
  WorkoutSections       WorkoutSection[]
  LoggedWorkoutSections LoggedWorkoutSection[]
}

///////////////////////////////////////
//// User and User Related ////////////
///////////////////////////////////////
model GymProfile {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  User              User               @relation(fields: [userId], references: [id])
  userId            String
  name              String
  description       String?
  postcode          String?
  // i.e. there is no equipment as this gym.
  bodyweightOnly    Boolean            @default(false)
  Equipments        Equipment[]
  ScheduledWorkouts ScheduledWorkout[]
  LoggedWorkouts    LoggedWorkout[]
}

model ScheduledWorkout {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  User            User           @relation(fields: [userId], references: [id])
  userId          String
  notes           String?
  scheduledAt     DateTime       @default(now())
  Workout         Workout?       @relation(fields: [workoutId], references: [id])
  workoutId       String?
  LoggedWorkout   LoggedWorkout? @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId String?
  GymProfile      GymProfile?    @relation(fields: [gymProfileId], references: [id])
  gymProfileId    String?
}

// Height in cms / weight in kgs
model User {
  id                       String                    @id @default(uuid())
  firebaseUid              String                    @unique
  createdAt                DateTime                  @default(now())
  hasOnboarded             Boolean                   @default(false)
  userProfileScope         UserProfileScope          @default(PRIVATE)
  avatarUri                String?
  introVideoUri            String?
  introVideoThumbUri       String?
  displayName              String?                   @unique
  firstname                String?
  lastname                 String?
  bio                      String?
  tagline                  String?
  birthdate                DateTime?
  gender                   Gender?                   @default(NONBINARY)
  height                   Float?
  heightUnit               HeightUnit                @default(CM)
  weight                   Float?
  weightUnit               WeightUnit                @default(KG)
  townCity                 String?
  countryCode              String?
  instagramUrl             String?
  tiktokUrl                String?
  youtubeUrl               String?
  snapUrl                  String?
  linkedinUrl              String?
  unitSystem               UnitSystem                @default(METRIC)
  CustomMoves              Move[]
  Workouts                 Workout[]
  ScheduledWorkouts        ScheduledWorkout[]
  LoggedWorkouts           LoggedWorkout[]
  GymProfiles              GymProfile[]
  WorkoutPrograms          WorkoutProgram[]
  WorkoutProgramEnrolments WorkoutProgramEnrolment[]
  WorkoutProgramReviews    WorkoutProgramReview[]
  UserBenchmarks           UserBenchmark[]
  Collections              UserCollection[]
  ProgressJournals         ProgressJournal[]
  ProgressJournalGoalTags  ProgressJournalGoalTag[]
  LoggedWorkoutSections    LoggedWorkoutSection[]
  LoggedWorkoutSets        LoggedWorkoutSet[]
  LoggedWorkoutMoves       LoggedWorkoutMove[]
  ProgressJournalGoals     ProgressJournalGoal[]
  ProgressJournalEntrys    ProgressJournalEntry[]
  WorkoutSections          WorkoutSection[]
  WorkoutSets              WorkoutSet[]
  WorkoutMoves             WorkoutMove[]
  WorkoutSetGenerators     WorkoutSetGenerator[]
  WorkoutSetIntervalBuyIn  WorkoutSetIntervalBuyIn[]
}

model UserCollection {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  User            User             @relation(fields: [userId], references: [id])
  userId          String
  name            String
  description     String?
  Workouts        Workout[]
  WorkoutPrograms WorkoutProgram[]
}

model UserBenchmark {
  id           String               @id @default(uuid())
  createdAt    DateTime             @default(now())
  User         User                 @relation(fields: [userId], references: [id])
  userId       String
  name         String
  description  String?
  reps         Float
  RepType      WorkoutMoveRepType   @default(REPS)
  load         Float?
  loadUnit     LoadUnit             @default(KG)
  distanceUnit DistanceUnit         @default(METRES)
  scoreType    BenchmarkScoreType   @default(LOAD)
  Equipments   Equipment[]
  Move         Move                 @relation(fields: [moveId], references: [id])
  moveId       String
  Entries      UserBenchmarkEntry[]
}

// Allows for progress tracking over time of any given benchmark that the user has created
model UserBenchmarkEntry {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  score           Float
  notes           String?
  videoUri        String?
  imageUri        String?
  UserBenchmark   UserBenchmark @relation(fields: [userBenchmarkId], references: [id])
  userBenchmarkId String
}

////////////////////////////////////////////////////
///// Workout Related Models and Children //////////
////////////////////////////////////////////////////
model Workout {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  archived               Boolean                 @default(false)
  User                   User?                   @relation(fields: [userId], references: [id])
  userId                 String?
  name                   String
  summary                String?
  description            String?
  introVideoUri          String?
  introVideoThumbUri     String?
  introAudioUri          String?
  coverImageUri          String?
  difficultyLevel        Int                     @default(50)
  contentAccessScope     ContentAccessScope      @default(PRIVATE)
  WorkoutSections        WorkoutSection[]
  LoggedWorkouts         LoggedWorkout[]
  ScheduledWorkouts      ScheduledWorkout[]
  WorkoutGoals           WorkoutGoal[]
  UserCollections        UserCollection[]
  WorkoutProgramWorkouts WorkoutProgramWorkout[]
}

model WorkoutSection {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  archived             Boolean            @default(false)
  User                 User               @relation(fields: [userId], references: [id])
  userId               String
  name                 String?
  notes                String?
  rounds               Int?               @default(1)
  timecap              Int? // Seconds. To finish ALL rounds of the section. i.e. the whole 'workout' as described.
  sortPosition         Int
  introVideoUri        String? // Will play before workout starts
  introVideoThumbUri   String?
  introAudioUri        String? // Will play before workout starts
  classVideoUri        String? // Will loop throughout duration of the workout
  classVideoThumbUri   String?
  classAudioUri        String? // Will loop throughout duration of the workout
  outroVideoUri        String? // Will play at end of workout
  outroVideoThumbUri   String?
  outroAudioUri        String? // Will play at end of workout
  Workout              Workout            @relation(fields: [workoutId], references: [id])
  workoutId            String
  WorkoutSectionType   WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  workoutSectionTypeId String
  WorkoutSets          WorkoutSet[]
}

model WorkoutSet {
  id               String                   @id @default(uuid())
  createdAt        DateTime                 @default(now())
  User             User                     @relation(fields: [userId], references: [id])
  userId           String
  sortPosition     Int
  rounds           Int?                     @default(1)
  notes            String?
  Generators       WorkoutSetGenerator[]
  IntervalBuyIn    WorkoutSetIntervalBuyIn?
  // If there is more than one move then this is a superset
  // In a superset you do each workoutMove in the array one after another
  // And then repeat this process {rounds} times
  WorkoutMoves     WorkoutMove[]
  WorkoutSection   WorkoutSection           @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId String
}

model WorkoutSetIntervalBuyIn {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  // Seconds - every {interval} seconds this move interrupts the workout and you must complete it before continuing
  interval      Int
  WorkoutMove   WorkoutMove @relation(fields: [workoutMoveId], references: [id])
  workoutMoveId String
  WorkoutSet    WorkoutSet  @relation(fields: [workoutSetId], references: [id])
  workoutSetId  String
}

model WorkoutSetGenerator {
  id               String                    @id @default(uuid())
  createdAt        DateTime                  @default(now())
  User             User                      @relation(fields: [userId], references: [id])
  userId           String
  type             WorkoutSetGeneratorType
  workoutMoveIndex Int
  target           WorkoutSetGeneratorTarget
  roundFrequency   Int
  adjustAmount     Float
  WorkoutSet       WorkoutSet?               @relation(fields: [workoutSetId], references: [id])
  workoutSetId     String?
}

model WorkoutMove {
  id                      String                    @id @default(uuid())
  createdAt               DateTime                  @default(now())
  User                    User                      @relation(fields: [userId], references: [id])
  userId                  String
  sortPosition            Int
  repType                 WorkoutMoveRepType
  reps                    Float
  distance                Float?
  distanceUnit            DistanceUnit              @default(METRES)
  loadAmount              Float?
  loadUnit                LoadUnit                  @default(KG)
  Move                    Move                      @relation(fields: [moveId], references: [id])
  moveId                  String
  Equipment               Equipment?                @relation(fields: [equipmentId], references: [id])
  equipmentId             String?
  WorkoutSet              WorkoutSet                @relation(fields: [workoutSetId], references: [id])
  workoutSetId            String
  WorkoutSetIntervalBuyIn WorkoutSetIntervalBuyIn[]
}

/////////////////////////////////////////////////////////
///// Workout Program (aka Plan) Related Models /////////
/////////////////////////////////////////////////////////
model WorkoutProgram {
  id                     String                    @id @default(uuid())
  createdAt              DateTime                  @default(now())
  archived               Boolean                   @default(false)
  name                   String
  description            String?
  coverImageUri          String?
  introVideoUri          String?
  introVideoThumbUri     String?
  introAudioUri          String?
  contentAccessScope     ContentAccessScope        @default(PRIVATE)
  User                   User                      @relation(fields: [userId], references: [id])
  userId                 String
  Enrolments             WorkoutProgramEnrolment[]
  WorkoutGoals           WorkoutGoal[]
  WorkoutProgramWorkouts WorkoutProgramWorkout[]
  WorkoutProgramReviews  WorkoutProgramReview[]
  UserCollections        UserCollection[]
}

// A single user enrolled in a plan a single time
// A single user can also enrol multiple times
model WorkoutProgramEnrolment {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  startDate        DateTime        @default(now())
  WorkoutProgram   WorkoutProgram  @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
  User             User            @relation(fields: [userId], references: [id])
  userId           String
  LoggedWorkouts   LoggedWorkout[]
}

model WorkoutProgramReview {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  User             User           @relation(fields: [userId], references: [id])
  userId           String
  score            Float
  comment          String?
  WorkoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
}

model WorkoutProgramWorkout {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  // Day on which the workout is planned. i.e. day 8 == week 2 day 1.
  // The decimal can be used to differentiate between having multiple workouts on each day.
  dayNumber        Float
  notes            String?
  WorkoutProgram   WorkoutProgram  @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
  Workout          Workout         @relation(fields: [workoutId], references: [id])
  workoutId        String
  LoggedWorkouts   LoggedWorkout[]
}

//////////////////////////////////////////////////////////
///// Logged Workout Related Models and Children /////////
//////////////////////////////////////////////////////////
model LoggedWorkout {
  id                        String                   @id @default(uuid())
  createdAt                 DateTime                 @default(now())
  completedOn               DateTime
  User                      User                     @relation(fields: [userId], references: [id])
  userId                    String
  name                      String
  notes                     String?
  imageUri                  String?
  LoggedWorkoutSections     LoggedWorkoutSection[]
  Workout                   Workout?                 @relation(fields: [workoutId], references: [id])
  workoutId                 String?
  ScheduledWorkout          ScheduledWorkout?
  GymProfile                GymProfile?              @relation(fields: [gymProfileId], references: [id])
  gymProfileId              String?
  // Need to connect to both the enrolment and the programWorkout to ensure ease of lookup.
  WorkoutProgramEnrolment   WorkoutProgramEnrolment? @relation(fields: [workoutProgramEnrolmentId], references: [id])
  workoutProgramEnrolmentId String?
  WorkoutProgramWorkout     WorkoutProgramWorkout?   @relation(fields: [workoutProgramWorkoutId], references: [id])
  workoutProgramWorkoutId   String?
}

model LoggedWorkoutSection {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  User                 User               @relation(fields: [userId], references: [id])
  userId               String
  sectionIndex         Int // The sort position of the WorkoutSection
  roundIndex           Int // The iteration (round) of the section during the workout
  timeTakenMs          Int // Milliseconds
  notes                String?
  LoggedWorkoutSets    LoggedWorkoutSet[]
  LoggedWorkout        LoggedWorkout      @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId      String
  WorkoutSectionType   WorkoutSectionType @relation(fields: [workoutSectionTypeId], references: [id])
  workoutSectionTypeId String
}

model LoggedWorkoutSet {
  id                     String               @id @default(uuid())
  createdAt              DateTime             @default(now())
  User                   User                 @relation(fields: [userId], references: [id])
  userId                 String
  setIndex               Int // The sort position of the WorkoutSet
  roundIndex             Int // The iteration (round) of the set during the workout
  timeTakenMs            Int? // Milliseconds - optional
  LoggedWorkoutMoves     LoggedWorkoutMove[]
  LoggedWorkoutSection   LoggedWorkoutSection @relation(fields: [loggedWorkoutSectionId], references: [id])
  loggedWorkoutSectionId String
}

model LoggedWorkoutMove {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  User               User               @relation(fields: [userId], references: [id])
  userId             String
  sortPosition       Int
  timeTakenMs        Int? // Milliseconds - optional
  repType            WorkoutMoveRepType
  reps               Float
  distance           Float?
  distanceUnit       DistanceUnit       @default(METRES)
  loadAmount         Float?
  loadUnit           LoadUnit           @default(KG)
  Move               Move               @relation(fields: [moveId], references: [id])
  moveId             String
  Equipment          Equipment?         @relation(fields: [equipmentId], references: [id])
  equipmentId        String?
  LoggedWorkoutSet   LoggedWorkoutSet   @relation(fields: [loggedWorkoutSetId], references: [id])
  loggedWorkoutSetId String
}

////////////////////////////////////////////////
////// Progress Journal Related ////////////////
////////////////////////////////////////////////
model ProgressJournal {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  User                   User                   @relation(fields: [userId], references: [id])
  userId                 String
  name                   String
  description            String?
  ProgressJournalEntries ProgressJournalEntry[]
  ProgressJournalGoals   ProgressJournalGoal[]
}

model ProgressJournalEntry {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  User              User            @relation(fields: [userId], references: [id])
  userId            String
  notes             String?
  voiceNoteUri      String?
  bodyweight        Float?
  moodScore         Float?
  energyScore       Float?
  stressScore       Float?
  motivationScore   Float?
  progressPhotoUris String[]
  ProgressJournal   ProgressJournal @relation(fields: [progressJournalId], references: [id])
  progressJournalId String
}

model ProgressJournalGoal {
  id                      String                   @id @default(uuid())
  createdAt               DateTime                 @default(now())
  User                    User                     @relation(fields: [userId], references: [id])
  userId                  String
  name                    String
  description             String?
  deadline                DateTime?
  completedDate           DateTime?
  ProgressJournalGoalTags ProgressJournalGoalTag[]
  ProgressJournal         ProgressJournal          @relation(fields: [progressJournalId], references: [id])
  progressJournalId       String
}

model ProgressJournalGoalTag {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  tag                  String
  hexColor             String
  User                 User                  @relation(fields: [userId], references: [id])
  userId               String
  ProgressJournalGoals ProgressJournalGoal[]
}

//////////////////////////////////
//// ENUMS ///////////////////////
//////////////////////////////////
enum BenchmarkScoreType {
  // For 1,3,5 rep max etc
  LOAD
  // For max unbroken
  REPS
  // For fastest time to complete or max unbroken
  TIME
}

enum BodyAreaFrontBack {
  BACK
  FRONT
  BOTH
}

enum BodyAreaUpperLower {
  CORE
  LOWER
  UPPER
}

enum ContentAccessScope {
  OFFICIAL
  PUBLIC
  GROUP
  PRIVATE
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
}

enum HeightUnit {
  CM
  IN
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
}

// Standard moves are built in / official.
// Custom moves are created by users.
enum MoveScope {
  STANDARD
  CUSTOM
}

enum ThemePreference {
  DARK
  LIGHT
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum WeightUnit {
  KG
  LB
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

enum WorkoutSetGeneratorTarget {
  REPS
  LOAD
}

enum WorkoutSetGeneratorType {
  LADDERUP
  LADDERDOWN
  PYRAMIDUP
  PYRAMIDDOWN
}

enum UserProfileScope {
  PRIVATE
  PUBLIC
}
