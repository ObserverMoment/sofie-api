// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

// model ScoreSubmission {
//   id                     String                @default(uuid()) @id
//   createdAt              DateTime              @default(now())
//   completedOn            DateTime
//   notes                  String?
//   completedBy            User                  @relation(fields: [completedById], references: [id])
//   completedById          String
//   challenge              Challenge?            @relation(fields: [challengeId], references: [id])
//   challengeId            String?
//   scoreSubmissionVideo   ScoreSubmissionVideo? @relation(fields: [scoreSubmissionVideoId], references: [id])
//   scoreSubmissionVideoId String?
// }

// model ScoreSubmissionVideo {
//   id                              String                           @default(uuid()) @id
//   createdAt                       DateTime                         @default(now())
//   videoUrl                        String
//   notes                           String?
//   scoreSubmission                 ScoreSubmission
//   scoreSubmissionId               String
//   scoreSubmissionVideoValidations ScoreSubmissionVideoValidation[]
// }

// model ScoreSubmissionVideoValidation {
//   id                          String                      @default(uuid()) @id
//   createdAt                   DateTime                    @default(now())
//   createdByUser               User                        @relation(fields: [createdByUserId], references: [id])
//   createdByUserId             String
//   isValid                     Boolean
//   scoreSubmissionVideo        ScoreSubmissionVideo        @relation(fields: [scoreSubmissionVideoId], references: [id])
//   scoreSubmissionVideoId      String
//   scoreSubmissionVideoComment ScoreSubmissionVideoComment
// }

// model ScoreSubmissionVideoComment {
//   id                               String                               @default(uuid()) @id
//   createdAt                        DateTime                             @default(now())
//   createdByUser                    User                                 @relation(fields: [createdByUserId], references: [id])
//   createdByUserId                  String
//   scoreSubmissionVideoValidation   ScoreSubmissionVideoValidation?      @relation(fields: [scoreSubmissionVideoValidationId], references: [id])
//   scoreSubmissionVideoValidationId String?
//   comment                          String
//   replies                          ScoreSubmissionVideoCommentReplies[]
// }

// model ScoreSubmissionVideoCommentReplies {
//   id                            String                      @default(uuid()) @id
//   createdAt                     DateTime                    @default(now())
//   createdByUser                 User                        @relation(fields: [createdByUserId], references: [id])
//   createdByUserId               String
//   comment                       String
//   scoreSubmissionVideoComment   ScoreSubmissionVideoComment @relation(fields: [scoreSubmissionVideoCommentId], references: [id])
//   scoreSubmissionVideoCommentId String
// }

// model Challenge {
//   id               String            @default(uuid()) @id
//   createdAt        DateTime          @default(now())
//   scope            AccessScopeType   @default(PRIVATE)
//   name             String            @unique
//   category         String?
//   description      String?
//   imageUrl         String?
//   repsPerPoint     Int               @default(5)
//   secsPerPoint     Int               @default(5)
//   mtrsPerPoint     Int               @default(5)
//   calsPerPoint     Int               @default(5)
//   scoreByPosition  Boolean           @default(false)
//   // If true, score multiplies across workouts, else they sum
//   multiplyScores   Boolean           @default(false)
//   group            Group             @relation(fields: [groupId], references: [id])
//   groupId          String
//   createdBy        User              @relation(fields: [createdById], references: [id])
//   createdById      String
//   scoreSubmissions ScoreSubmission[]
//   watchers         User[]            @relation("watchersToChallenges", references: [id])
// }

// model Group {
//   id          String          @default(uuid()) @id
//   scope       AccessScopeType @default(PRIVATE)
//   logoUrl     String?
//   name        String          @unique
//   countryCode String?
//   description String?
//   createdBy   User            @relation("groupToCreator", fields: [createdById], references: [id])
//   createdById String
//   admins      User[]          @relation("groupToAdmins", references: [id])
//   members     User[]          @relation("groupToMembers", references: [id])
//   challenges  Challenge[]
// }

model Equipment {
  id                 String        @id @default(uuid())
  name               String        @unique
  imageUrl           String?
  requiredForMoves   Move[]        @relation("moveToRequiredEquipments", references: [id])
  selectableForMoves Move[]        @relation("moveToSelectableEquipments", references: [id])
  WorkoutMove        WorkoutMove[]
  GymProfile         GymProfile?   @relation(fields: [gymProfileId], references: [id])
  gymProfileId       String?
}

model Move {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  createdBy            User?                @relation(fields: [createdById], references: [id])
  createdById          String?
  scope                AccessScopeType      @default(PRIVATE)
  name                 String               @unique
  description          String?
  demoVideoUrl         String?
  validRepTypes        WorkoutMoveRepType[]
  requiredEquipments   Equipment[]          @relation("moveToRequiredEquipments", references: [id])
  selectableEquipments Equipment[]          @relation("moveToSelectableEquipments", references: [id])
  moveProfileRequired  MoveProfile[]        @relation("requiredMoves", references: [id])
  moveProfileExcluded  MoveProfile[]        @relation("excludedMoves", references: [id])
  workoutMoves         WorkoutMove[]
}

model WorkoutType {
  id            String           @id @default(uuid())
  name          String
  description   String?
  scoreType     WorkoutScoreType
  Workout       Workout[]
  LoggedWorkout LoggedWorkout[]
}

model GymProfile {
  id                  String             @id @default(uuid())
  user                User               @relation(fields: [userId], references: [id])
  userId              String
  name                String
  description         String?
  postcode            String?
  availableEquipments Equipment[]
  scheduledWorkouts   ScheduledWorkout[]
  loggedWorkouts      LoggedWorkout[]
}

model MoveProfile {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  name          String
  description   String?
  requiredMoves Move[]  @relation("requiredMoves", references: [id])
  excludedMoves Move[]  @relation("excludedMoves", references: [id])
}

model Workout {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  createdBy         User?              @relation(fields: [createdById], references: [id])
  createdById       String?
  name              String
  summary           String?
  description       String?
  demoVideoUrl      String?
  demoVideoThumbUrl String?
  youtubeVideoUrl   String?
  spotifyAudio      String?
  imageUrl          String?
  timecap           Int?
  // structureData holds config info for certain workout types. E.g. Circuits and Tabatas.
  builderData       Json?
  difficultyLevel   Int                @default(50)
  scope             AccessScopeType    @default(PRIVATE)
  workoutType       WorkoutType        @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId     String
  workoutSections   WorkoutSection[]
  scheduledWorkouts ScheduledWorkout[]
  workoutLogs       LoggedWorkout[]
  // tags              WorkoutTag[]
  likes             LikedWorkout[]
}

model ScheduledWorkout {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  notes           String?
  scheduledAt     DateTime       @default(now())
  workout         Workout?       @relation(fields: [workoutId], references: [id])
  workoutId       String?
  loggedWorkout   LoggedWorkout? @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId String?
  gymProfile      GymProfile?    @relation(fields: [gymProfileId], references: [id])
  gymProfileId    String?
}

model LikedWorkout {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  notes     String?
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId String
  // likedworkoutTags LikedWorkoutTag[]

  @@id([userId, workoutId])
}

// Need to implement some more solid polymorphism here if we want to allow a workoutSection
// to be on a workout or a loggedWorkout
// Currently no validation makinhg sure the section is not parentless.
model WorkoutSection {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  sortPosition     Int
  notes            String?
  timecap          Int?
  // For logging. Number of seconds it took to complete a single round of the section
  duration         Int?
  rounds           Int
  workout          Workout?          @relation(fields: [workoutId], references: [id])
  workoutId        String?
  workoutMoves     WorkoutMove[]
  roundAdjustRules RoundAdjustRule[]
  LoggedWorkout    LoggedWorkout?    @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId  String?
}

// Every {roundFrequency} rounds {operator} reps by {amount}
// Eg. Every 3 rounds INCREASE reps by 10 (for all workout moves within the section)
model RoundAdjustRule {
  id               String         @id @default(uuid())
  action           RuleAction
  target           RuleTarget
  amount           Float
  roundFrequency   Int            @default(1) // Every round
  WorkoutSection   WorkoutSection @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId String
}

enum RuleAction {
  INCREASE
  DECREASE
  MULTIPLY
}

enum RuleTarget {
  REPS
  LOAD
}

model WorkoutMove {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now())
  sortPosition        Int
  repType             WorkoutMoveRepType @default(REPS)
  reps                Float?             @default(10)
  distanceUnit        DistanceUnit       @default(METRES)
  loadAmount          Float?
  loadUnit            LoadUnit           @default(KG)
  // For logging. Number of seconds it took to complete the workoutMove
  duration            Int?
  description         String?
  notes               String?
  move                Move               @relation(fields: [moveId], references: [id])
  moveId              String
  selectedEquipment   Equipment?         @relation(fields: [selectedEquipmentId], references: [id])
  selectedEquipmentId String?
  workoutSection      WorkoutSection     @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId    String
}

// Data from a completed workout. Also inlcudes relation to the 'original' workout
model LoggedWorkout {
  id                   String            @id @default(uuid())
  name                 String
  summary              String?
  description          String?
  createdAt            DateTime          @default(now())
  completedOn          DateTime
  completedBy          User              @relation(fields: [completedById], references: [id])
  completedById        String
  notes                String?
  videoUrl             String?
  videoThumbUrl        String?
  imageUrl             String?
  duration             Int?
  difficultyLevel      Int               @default(50)
  workoutType          WorkoutType       @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId        String
  workoutSections      WorkoutSection[]
  originalWorkout      Workout?          @relation(fields: [originalWorkoutId], references: [id])
  originalWorkoutId    String?
  originalWorkoutScope AccessScopeType
  scheduledWorkout     ScheduledWorkout?
  scheduledWorkoutId   String?
  gymProfile           GymProfile?       @relation(fields: [gymProfileId], references: [id])
  gymProfileId         String?
}

// Height in cms / weight in kgs
model User {
  id                String             @id @default(uuid())
  firebaseUid       String             @unique
  createdAt         DateTime           @default(now())
  hasOnboarded      Boolean?           @default(false)
  avatarUrl         String?
  displayName       String?            @unique
  firstname         String?
  lastname          String?
  themePreference   ThemePreference?   @default(DARK)
  bio               String?
  birthdate         DateTime?
  gender            Gender?            @default(UNSPECIFIED)
  height            Float?
  weight            Float?
  townCity          String?
  countryCode       String?
  unitSystem        UnitSystem         @default(METRIC)
  // scoreSubmissions                   ScoreSubmission[]
  // challenges                         Challenge[]
  // scoreSubmissionVideoValidations    ScoreSubmissionVideoValidation[]
  // scoreSubmissionVideoComments       ScoreSubmissionVideoComment[]
  // ScoreSubmissionVideoCommentReplies ScoreSubmissionVideoCommentReplies[]
  // watchedChallenges                  Challenge[]                          @relation("watchersToChallenges", references: [id])
  followedBy        User[]             @relation("UserFollows", references: [id])
  following         User[]             @relation("UserFollows", references: [id])
  // groupsWhereAdmin                   Group[]                              @relation("groupToAdmins")
  // groupsWhereMember                  Group[]                              @relation("groupToMembers")
  // groupsWhereCreator                 Group[]                              @relation("groupToCreator")
  moves             Move[]
  workouts          Workout[]
  scheduledWorkouts ScheduledWorkout[]
  loggedWorkouts    LoggedWorkout[]
  likedWorkouts     LikedWorkout[]
  gymProfiles       GymProfile[]
  moveProfiles      MoveProfile[]
}

// Enums
enum AccessScopeType {
  OFFICIAL
  PUBLIC
  PAID
  PRIVATE
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

// AMREPS in reps
// TIME in seconds
// LOAD in kgs
enum WorkoutScoreType {
  AMREPS
  FORTIME
  FORLOAD
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum ThemePreference {
  DARK
  LIGHT
}
