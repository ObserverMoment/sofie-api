// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

// url = "***"
datasource db {
  provider = "postgresql"
  url = "***"
}

model Benchmark {
  id                 String            @default(uuid()) @id
  createdAt          DateTime          @default(now())
  completedOn        DateTime
  level              Level
  score              Int
  note               String?
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  privateChallenge   PrivateChallenge? @relation(fields: [privateChallengeId], references: [id])
  privateChallengeId String?
  publicChallenge    PublicChallenge?  @relation(fields: [publicChallengeId], references: [id])
  publicChallengeId  String?
  benchmarkVideo     BenchmarkVideo?   @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId   String?
}

model BenchmarkVideo {
  id                        String                     @default(uuid()) @id
  createdAt                 DateTime                   @default(now())
  videoUrl                  String
  note                      String?
  benchmark                 Benchmark
  benchmarkId               String
  benchmarkVideoValidations BenchmarkVideoValidation[]
}

model BenchmarkVideoValidation {
  id                    String                @default(uuid()) @id
  createdAt             DateTime              @default(now())
  createdByUser         User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId       String
  isValid               Boolean
  benchmarkVideo        BenchmarkVideo        @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId      String
  benchmarkVideoComment BenchmarkVideoComment
}

model BenchmarkVideoComment {
  id                         String                         @default(uuid()) @id
  createdAt                  DateTime                       @default(now())
  createdByUser              User                           @relation(fields: [createdByUserId], references: [id])
  createdByUserId            String
  benchmarkVideoValidation   BenchmarkVideoValidation?      @relation(fields: [benchmarkVideoValidationId], references: [id])
  benchmarkVideoValidationId String?
  comment                    String
  replies                    BenchmarkVideoCommentReplies[]
}

model BenchmarkVideoCommentReplies {
  id                      String                @default(uuid()) @id
  createdAt               DateTime              @default(now())
  createdByUser           User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId         String
  comment                 String
  benchmarkVideoComment   BenchmarkVideoComment @relation(fields: [benchmarkVideoCommentId], references: [id])
  benchmarkVideoCommentId String
}

model PrivateChallenge {
  id          String      @default(uuid()) @id
  createdAt   DateTime    @default(now())
  name        String      @unique
  category    String?
  description String?
  imageUrl    String?
  league      League      @relation(fields: [leagueId], references: [id])
  leagueId    String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  workout     Workout     @relation(fields: [workoutId], references: [id])
  workoutId   String
  benchmarks  Benchmark[]
}

model PublicChallenge {
  id          String      @default(uuid()) @id
  createdAt   DateTime    @default(now())
  name        String      @unique
  category    String?
  description String?
  imageUrl    String?
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  workout     Workout     @relation(fields: [workoutId], references: [id])
  workoutId   String
  benchmarks  Benchmark[]
}

model League {
  id                String             @default(uuid()) @id
  logoUrl           String?
  name              String             @unique
  countryCode       String?
  description       String?
  users             User[]             @relation(references: [id])
  privateChallenges PrivateChallenge[]
}

model Move {
  id           String        @default(uuid()) @id
  name         String        @unique
  description  String?
  demoVideoUrl String?
  workoutMoves WorkoutMove[]
}

model WorkoutMove {
  id                  String  @default(uuid()) @id
  beginnerScaling     String?
  intermediateScaling String?
  prescribedScaling   String?
  repsPerRound        Int?
  move                Move    @relation(fields: [moveId], references: [id])
  moveId              String
  workout             Workout @relation(fields: [workoutId], references: [id])
  workoutId           String
}

model Workout {
  id                String             @default(uuid()) @id
  name              String             @unique
  category          WodCategory
  summary           String
  description       String?
  workoutType       WorkoutType
  workoutMoves      WorkoutMove[]
  worldRecords      WorldRecord[]
  privateChallenges PrivateChallenge[]
  publicChallenges  PublicChallenge[]
}

model WorldRecord {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  notes       String?
  recordValue Int
  recordType  RecordType
  gender      Gender
  workout     Workout    @relation(fields: [workoutId], references: [id])
  workoutId   String
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

// Height in cms / weight in kgs
model User {
  id                           String                         @default(uuid()) @id
  firebaseUid                  String                         @unique
  createdAt                    DateTime                       @default(now())
  hasOnboarded                 Boolean                        @default(false)
  avatarUrl                    String?
  displayName                  String?                        @unique
  firstname                    String?
  lastname                     String?
  bio                          String?
  birthdate                    DateTime?
  gender                       Gender?
  height                       Float?
  weight                       Float?
  gymBox                       String?
  townCity                     String?
  countryCode                  String?
  unitSystem                   UnitSystem                     @default(METRIC)
  benchmarks                   Benchmark[]
  leagues                      League[]
  worldRecords                 WorldRecord[]
  privateChallenges            PrivateChallenge[]
  publicChallenges             PublicChallenge[]
  benchmarkVideoValidations    BenchmarkVideoValidation[]
  benchmarkVideoComments       BenchmarkVideoComment[]
  BenchmarkVideoCommentReplies BenchmarkVideoCommentReplies[]
}

// Enums
enum Gender {
  MALE
  FEMALE
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ELITE
}

// AMRAP in reps
// TIME in seconds
// LOAD in lbs
enum RecordType {
  AMRAP
  FORTIME
  FORLOAD
}

// https://beyondthewhiteboard.com/gyms/2-main-site/leader_boards/414
enum WodCategory {
  GIRLS
  HEROES
  NOTABLES
}

enum WorkoutType {
  AMRAP
  FORTIME
  FORLOAD
}

// Used on table WorkoutToChallenge to allow polymorphic relation
enum ChallengeType {
  PRIVATE
  PUBLIC
}