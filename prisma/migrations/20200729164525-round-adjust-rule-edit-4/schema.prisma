// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model ScoreSubmission {
  id                     String                @default(uuid()) @id
  createdAt              DateTime              @default(now())
  completedOn            DateTime
  note                   String?
  completedBy            User                  @relation(fields: [completedById], references: [id])
  completedById          String
  challenge              Challenge?            @relation(fields: [challengeId], references: [id])
  challengeId            String?
  scoreSubmissionVideo   ScoreSubmissionVideo? @relation(fields: [scoreSubmissionVideoId], references: [id])
  scoreSubmissionVideoId String?
  workoutScore           WorkoutScore          @relation(fields: [workoutScoreId], references: [id])
  workoutScoreId         String
}

model ScoreSubmissionVideo {
  id                              String                           @default(uuid()) @id
  createdAt                       DateTime                         @default(now())
  videoUrl                        String
  note                            String?
  scoreSubmission                 ScoreSubmission
  scoreSubmissionId               String
  scoreSubmissionVideoValidations ScoreSubmissionVideoValidation[]
}

model ScoreSubmissionVideoValidation {
  id                          String                      @default(uuid()) @id
  createdAt                   DateTime                    @default(now())
  createdByUser               User                        @relation(fields: [createdByUserId], references: [id])
  createdByUserId             String
  isValid                     Boolean
  scoreSubmissionVideo        ScoreSubmissionVideo        @relation(fields: [scoreSubmissionVideoId], references: [id])
  scoreSubmissionVideoId      String
  scoreSubmissionVideoComment ScoreSubmissionVideoComment
}

model ScoreSubmissionVideoComment {
  id                               String                               @default(uuid()) @id
  createdAt                        DateTime                             @default(now())
  createdByUser                    User                                 @relation(fields: [createdByUserId], references: [id])
  createdByUserId                  String
  scoreSubmissionVideoValidation   ScoreSubmissionVideoValidation?      @relation(fields: [scoreSubmissionVideoValidationId], references: [id])
  scoreSubmissionVideoValidationId String?
  comment                          String
  replies                          ScoreSubmissionVideoCommentReplies[]
}

model ScoreSubmissionVideoCommentReplies {
  id                            String                      @default(uuid()) @id
  createdAt                     DateTime                    @default(now())
  createdByUser                 User                        @relation(fields: [createdByUserId], references: [id])
  createdByUserId               String
  comment                       String
  scoreSubmissionVideoComment   ScoreSubmissionVideoComment @relation(fields: [scoreSubmissionVideoCommentId], references: [id])
  scoreSubmissionVideoCommentId String
}

model Challenge {
  id               String             @default(uuid()) @id
  createdAt        DateTime           @default(now())
  scope            AccessScopeType    @default(PRIVATE)
  name             String             @unique
  category         String?
  description      String?
  imageUrl         String?
  repsPerPoint     Int                @default(5)
  secsPerPoint     Int                @default(5)
  mtrsPerPoint     Int                @default(5)
  calsPerPoint     Int                @default(5)
  scoreByPosition  Boolean            @default(false)
  // If true, score multiplies across workouts, else they sum
  multiplyScores   Boolean            @default(false)
  group            Group              @relation(fields: [groupId], references: [id])
  groupId          String
  createdBy        User               @relation(fields: [createdById], references: [id])
  createdById      String
  workouts         Workout[]          @relation(references: [id])
  scoreSubmissions ScoreSubmission[]
  watchers         User[]             @relation("watchersToChallenges", references: [id])
  scheduledWorkout ScheduledWorkout[]
}

model Group {
  id          String          @default(uuid()) @id
  scope       AccessScopeType @default(PRIVATE)
  logoUrl     String?
  name        String          @unique
  countryCode String?
  description String?
  createdBy   User            @relation("groupToCreator", fields: [createdById], references: [id])
  createdById String
  admins      User[]          @relation("groupToAdmins", references: [id])
  members     User[]          @relation("groupToMembers", references: [id])
  challenges  Challenge[]
}

model Equipment {
  id                 String        @default(uuid()) @id
  name               String        @unique
  imageUrl           String?
  requiredForMoves   Move[]        @relation("moveToRequiredEquipments", references: [id])
  selectableForMoves Move[]        @relation("moveToSelectableEquipments", references: [id])
  WorkoutMove        WorkoutMove[]
}

model Move {
  id                   String               @default(uuid()) @id
  createdAt            DateTime             @default(now())
  createdBy            User?                @relation(fields: [createdById], references: [id])
  createdById          String?
  scope                AccessScopeType      @default(PRIVATE)
  name                 String               @unique
  description          String?
  demoVideoUrl         String?
  moveType             MoveType             @default(STANDARD)
  compoundMoveParents  Move[]               @relation("compoundMoves", references: [id])
  compoundMoveChildren Move[]               @relation("compoundMoves", references: [id])
  validRepTypes        WorkoutMoveRepType[]
  requiredEquipments   Equipment[]          @relation("moveToRequiredEquipments", references: [id])
  selectableEquipments Equipment[]          @relation("moveToSelectableEquipments", references: [id])
  workoutMoves         WorkoutMove[]
}

model WorkoutMove {
  id                  String             @default(uuid()) @id
  createdAt           DateTime           @default(now())
  sortPosition        Int
  repType             WorkoutMoveRepType @default(REPS)
  reps                Float?             @default(10)
  distanceUnit        DistanceUnit       @default(METRES)
  loadAmount          Float?
  loadUnit            LoadUnit           @default(KG)
  description         String?
  move                Move               @relation(fields: [moveId], references: [id])
  moveId              String
  selectedEquipment   Equipment?         @relation(fields: [selectedEquipmentId], references: [id])
  selectedEquipmentId String?
  workoutSection      WorkoutSection     @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId    String
}

model WorkoutSection {
  id                     String            @default(uuid()) @id
  createdAt              DateTime          @default(now())
  sortPosition           Int
  notes                  String?
  repPyramid             Boolean           @default(false)
  repPyramidStructure    Int[]
  weightPyramid          Boolean           @default(false)
  weightPyramidStructure Int[]
  timecap                Int?
  rounds                 Int               @default(1)
  workout                Workout           @relation(fields: [workoutId], references: [id])
  workoutId              String
  workoutMoves           WorkoutMove[]
  roundAdjustRules       RoundAdjustRule[]
}

// Every {roundFrequency} rounds {operator} reps by {amount}
// Eg. Every 3 rounds INCREASE reps by 10 (for all workout moves within the section)
model RoundAdjustRule {
  id               String         @default(uuid()) @id
  action           RuleAction
  target           RuleTarget
  amount           Float
  roundFrequency   Int            @default(1) // Every round
  WorkoutSection   WorkoutSection @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId String
}

enum RuleAction {
  INCREASE
  DECREASE
  MULTIPLY
}

enum RuleTarget {
  REP
  LOAD
}

model Workout {
  id                String             @default(uuid()) @id
  createdAt         DateTime           @default(now())
  createdBy         User?              @relation(fields: [createdById], references: [id])
  createdById       String?
  name              String
  summary           String?
  description       String?
  demoVideoUrl      String?
  demoVideoThumbUrl String?
  youtubeVideoUrl   String?
  spotifyAudio      String?
  imageUrl          String?
  timecap           Int?
  difficultyLevel   DifficultyLevel    @default(ONE)
  scope             AccessScopeType    @default(PRIVATE)
  workoutType       WorkoutType        @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId     String
  challenges        Challenge[]        @relation(references: [id])
  scheduledWorkouts ScheduledWorkout[]
  workoutSections   WorkoutSection[]
}

model WorkoutType {
  id          String           @default(uuid()) @id
  name        String
  description String?
  scoreType   WorkoutScoreType
  Workout     Workout[]
}

model ScheduledWorkout {
  id             String       @default(uuid()) @id
  createdAt      DateTime     @default(now())
  createdBy      User         @relation(fields: [createdById], references: [id])
  createdById    String
  notes          String?
  scheduledAt    DateTime     @default(now())
  completed      Boolean      @default(false)
  workout        Workout      @relation(fields: [workoutId], references: [id])
  workoutId      String
  workoutScore   WorkoutScore @relation(fields: [workoutScoreId], references: [id])
  workoutScoreId String
  challenge      Challenge?   @relation(fields: [challengeId], references: [id])
  challengeId    String?
}

// log is for data from the workout itself (i.e. time per round) - auto generated by the app
// notes is optional user input
model WorkoutScore {
  id               String           @default(uuid()) @id
  createdAt        DateTime         @default(now())
  score            Int
  log              String?
  notes            String?
  scheduledWorkout ScheduledWorkout
  scoreSubmission  ScoreSubmission?
}

// Height in cms / weight in kgs
model User {
  id                                 String                               @default(uuid()) @id
  firebaseUid                        String                               @unique
  createdAt                          DateTime                             @default(now())
  hasOnboarded                       Boolean?                             @default(false)
  avatarUrl                          String?
  displayName                        String?                              @unique
  firstname                          String?
  lastname                           String?
  themePreference                    ThemePreference?                     @default(DARK)
  bio                                String?
  birthdate                          DateTime?
  gender                             Gender?
  height                             Float?
  weight                             Float?
  gymBox                             String?
  townCity                           String?
  countryCode                        String?
  unitSystem                         UnitSystem                           @default(METRIC)
  subscriptionLevel                  UserSubscriptionLevel                @default(FREE)
  scoreSubmissions                   ScoreSubmission[]
  challenges                         Challenge[]
  scoreSubmissionVideoValidations    ScoreSubmissionVideoValidation[]
  scoreSubmissionVideoComments       ScoreSubmissionVideoComment[]
  ScoreSubmissionVideoCommentReplies ScoreSubmissionVideoCommentReplies[]
  watchedChallenges                  Challenge[]                          @relation("watchersToChallenges", references: [id])
  followedBy                         User[]                               @relation("UserFollows", references: [id])
  following                          User[]                               @relation("UserFollows", references: [id])
  groupsWhereAdmin                   Group[]                              @relation("groupToAdmins")
  groupsWhereMember                  Group[]                              @relation("groupToMembers")
  groupsWhereCreator                 Group[]                              @relation("groupToCreator")
  moves                              Move[]
  workouts                           Workout[]
  scheduledWorkouts                  ScheduledWorkout[]
}

// Enums
enum AccessScopeType {
  OFFICIAL
  PUBLIC
  GROUP
  PRIVATE
}

enum MoveType {
  STANDARD
  COMPOUND
}

enum UserSubscriptionLevel {
  FREE
  PAID
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum DifficultyLevel {
  ONE
  TWO
  THREE
  FOUR
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

// AMREPS in reps
// TIME in seconds
// LOAD in kgs
enum WorkoutScoreType {
  AMREPS
  FORTIME
  FORLOAD
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum ThemePreference {
  DARK
  LIGHT
}
