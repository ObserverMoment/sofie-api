// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Benchmark {
  id               String          @default(uuid()) @id
  createdAt        DateTime        @default(now())
  completedOn      DateTime
  note             String?
  completedBy      User            @relation(fields: [completedById], references: [id])
  completedById    String
  challenge        Challenge?      @relation(fields: [challengeId], references: [id])
  challengeId      String?
  benchmarkVideo   BenchmarkVideo? @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId String?
  workoutScore     WorkoutScore    @relation(fields: [workoutScoreId], references: [id])
  workoutScoreId   String
}

model BenchmarkVideo {
  id                        String                     @default(uuid()) @id
  createdAt                 DateTime                   @default(now())
  videoUrl                  String
  note                      String?
  benchmark                 Benchmark
  benchmarkId               String
  benchmarkVideoValidations BenchmarkVideoValidation[]
}

model BenchmarkVideoValidation {
  id                    String                @default(uuid()) @id
  createdAt             DateTime              @default(now())
  createdByUser         User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId       String
  isValid               Boolean
  benchmarkVideo        BenchmarkVideo        @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId      String
  benchmarkVideoComment BenchmarkVideoComment
}

model BenchmarkVideoComment {
  id                         String                         @default(uuid()) @id
  createdAt                  DateTime                       @default(now())
  createdByUser              User                           @relation(fields: [createdByUserId], references: [id])
  createdByUserId            String
  benchmarkVideoValidation   BenchmarkVideoValidation?      @relation(fields: [benchmarkVideoValidationId], references: [id])
  benchmarkVideoValidationId String?
  comment                    String
  replies                    BenchmarkVideoCommentReplies[]
}

model BenchmarkVideoCommentReplies {
  id                      String                @default(uuid()) @id
  createdAt               DateTime              @default(now())
  createdByUser           User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId         String
  comment                 String
  benchmarkVideoComment   BenchmarkVideoComment @relation(fields: [benchmarkVideoCommentId], references: [id])
  benchmarkVideoCommentId String
}

model Challenge {
  id               String             @default(uuid()) @id
  createdAt        DateTime           @default(now())
  scope            AccessScopeType    @default(PRIVATE)
  name             String             @unique
  category         String?
  description      String?
  imageUrl         String?
  group            Group              @relation(fields: [groupId], references: [id])
  groupId          String
  createdBy        User               @relation(fields: [createdById], references: [id])
  createdById      String
  workouts         Workout[]          @relation(references: [id])
  benchmarks       Benchmark[]
  watchers         User[]             @relation("watchersToChallenges", references: [id])
  scheduledWorkout ScheduledWorkout[]
}

model Group {
  id          String          @default(uuid()) @id
  scope       AccessScopeType @default(PRIVATE)
  logoUrl     String?
  name        String          @unique
  countryCode String?
  description String?
  createdBy   User            @relation("groupToCreator", fields: [createdById], references: [id])
  createdById String
  admins      User[]          @relation("groupToAdmins", references: [id])
  members     User[]          @relation("groupToMembers", references: [id])
  challenges  Challenge[]
}

model Equipment {
  id                 String        @default(uuid()) @id
  name               String        @unique
  imageUrl           String?
  requiredForMoves   Move[]        @relation("moveToRequiredEquipments", references: [id])
  selectableForMoves Move[]        @relation("moveToSelectableEquipments", references: [id])
  WorkoutMove        WorkoutMove[]
}

model Move {
  id                   String          @default(uuid()) @id
  createdAt            DateTime        @default(now())
  createdBy            User?           @relation(fields: [createdById], references: [id])
  createdById          String?
  scope                AccessScopeType @default(PRIVATE)
  name                 String          @unique
  description          String?
  demoVideoUrl         String?
  requiredEquipments   Equipment[]     @relation("moveToRequiredEquipments", references: [id])
  selectableEquipments Equipment[]     @relation("moveToSelectableEquipments", references: [id])
  workoutMoves         WorkoutMove[]
}

model WorkoutMove {
  id                  String             @default(uuid()) @id
  createdAt           DateTime           @default(now())
  sortPosition        Int
  repType             WorkoutMoveRepType @default(REPS)
  maleReps            Int?
  femaleReps          Int?
  maleLoadAmountKgs   Float?
  femaleLoadAmountKgs Float?
  move                Move               @relation(fields: [moveId], references: [id])
  moveId              String
  selectedEquipment   Equipment          @relation(fields: [selectedEquipmentId], references: [id])
  selectedEquipmentId String
  workoutSection      WorkoutSection     @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId    String
}

model WorkoutSection {
  id             String        @default(uuid()) @id
  createdAt      DateTime      @default(now())
  sortPosition   Int
  name           String?
  isPyramid      Boolean       @default(false)
  timecapSeconds Int?
  rounds         Int           @default(1)
  workout        Workout       @relation(fields: [workoutId], references: [id])
  workoutId      String
  workoutMoves   WorkoutMove[]
}

model Workout {
  id                  String               @default(uuid()) @id
  createdAt           DateTime             @default(now())
  createdBy           User?                @relation(fields: [createdById], references: [id])
  createdById         String?
  name                String               @unique
  summary             String?
  description         String?
  timecapSeconds      Int?
  genderEquality      Boolean              @default(true)
  difficultyLevel     DifficultyLevel      @default(ONE)
  scope               AccessScopeType      @default(PRIVATE)
  crossfitWodCategory CrossfitWodCategory?
  workoutScoreType    WorkoutScoreType     @default(AMREPS)
  worldRecords        WorldRecord[]
  challenges          Challenge[]          @relation(references: [id])
  scheduledWorkouts   ScheduledWorkout[]
  workoutSections     WorkoutSection[]
}

model ScheduledWorkout {
  id             String       @default(uuid()) @id
  createdAt      DateTime     @default(now())
  createdBy      User         @relation(fields: [createdById], references: [id])
  createdById    String
  notes          String?
  scheduledAt    DateTime     @default(now())
  completed      Boolean      @default(false)
  workout        Workout      @relation(fields: [workoutId], references: [id])
  workoutId      String
  workoutScore   WorkoutScore @relation(fields: [workoutScoreId], references: [id])
  workoutScoreId String
  challenge      Challenge?   @relation(fields: [challengeId], references: [id])
  challengeId    String?
}

// log is for data from the workout itself (i.e. time per round) - auto generated by the app
// notes is optional user input
model WorkoutScore {
  id               String           @default(uuid()) @id
  createdAt        DateTime         @default(now())
  score            Int
  log              String?
  notes            String?
  scheduledWorkout ScheduledWorkout
  benchmark        Benchmark?
}

model WorldRecord {
  id               String           @default(uuid()) @id
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  notes            String?
  recordValue      Int
  workoutScoreType WorkoutScoreType @default(AMREPS)
  gender           Gender
  workout          Workout          @relation(fields: [workoutId], references: [id])
  workoutId        String
  user             User?            @relation(fields: [userId], references: [id])
  userId           String?
}

// Height in cms / weight in kgs
model User {
  id                           String                         @default(uuid()) @id
  firebaseUid                  String                         @unique
  createdAt                    DateTime                       @default(now())
  hasOnboarded                 Boolean                        @default(false)
  avatarUrl                    String?
  displayName                  String?                        @unique
  firstname                    String?
  lastname                     String?
  bio                          String?
  birthdate                    DateTime?
  gender                       Gender?
  height                       Float?
  weight                       Float?
  gymBox                       String?
  townCity                     String?
  countryCode                  String?
  unitSystem                   UnitSystem                     @default(METRIC)
  subscriptionLevel            UserSubscriptionLevel          @default(FREE)
  benchmarks                   Benchmark[]
  worldRecords                 WorldRecord[]
  challenges                   Challenge[]
  benchmarkVideoValidations    BenchmarkVideoValidation[]
  benchmarkVideoComments       BenchmarkVideoComment[]
  BenchmarkVideoCommentReplies BenchmarkVideoCommentReplies[]
  watchedChallenges            Challenge[]                    @relation("watchersToChallenges", references: [id])
  followers                    UserConnection[]               @relation("followee")
  following                    UserConnection[]               @relation("follower")
  groupsWhereAdmin             Group[]                        @relation("groupToAdmins")
  groupsWhereMember            Group[]                        @relation("groupToMembers")
  groupsWhereCreator           Group[]                        @relation("groupToCreator")
  moves                        Move[]
  workouts                     Workout[]
  scheduledWorkouts            ScheduledWorkout[]
}

// Need to check if the below names are the correct way around
// What actually happens (what query is made) when you run User.followers with @relation("followee")?
// Does it get all UserConnections where followeeId = user.id?
// If so then this is probably the correct way around...
// As it would be all the instances where the user is the followee.
// https://github.com/prisma/prisma/issues/1483
model UserConnection {
  id         String   @default(uuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followee   User?    @relation("followee", fields: [followeeId], references: [id])
  followeeId String?
}

// Enums
enum AccessScopeType {
  OFFICIAL
  PUBLIC
  GROUP
  PRIVATE
}

enum UserSubscriptionLevel {
  FREE
  PAID
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum DifficultyLevel {
  ONE
  TWO
  THREE
  FOUR
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

// AMREPS in reps
// AMROUNDS in rounds
// TIME in seconds
// LOAD in kgs
// EMON in rounds completed (if doing standard EMON then this unit value is minutes)
// Also used for: Every 5 miniutes on the 5 minutes etc - free text in description?
enum WorkoutScoreType {
  AMREPS
  AMROUNDS
  EMOM
  FORTIME
  FORLOAD
}

// https://beyondthewhiteboard.com/gyms/2-main-site/leader_boards/414
enum CrossfitWodCategory {
  GIRLS
  HEROES
  NOTABLES
}

enum UnitSystem {
  IMPERIAL
  METRIC
}
