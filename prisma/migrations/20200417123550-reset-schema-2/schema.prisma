// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

// url = "***"
datasource db {
  provider = "postgresql"
  url = "***"
}

model Benchmark {
  id           String        @default(uuid()) @id
  createdAt    DateTime      @default(now())
  completedOn  DateTime
  level        Level
  score        Int
  notes        String?
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  workout      Workout       @relation(fields: [workoutId], references: [id])
  workoutId    String
  workoutVideo WorkoutVideo?
}

model League {
  id          String  @default(uuid()) @id
  logoUrl     String?
  name        String  @unique
  description String?
  user        User[]  @relation(references: [id])
}

model Move {
  id           String        @default(uuid()) @id
  name         String        @unique
  workoutMoves WorkoutMove[]
}

// Height in cms / weight in kgs
model User {
  id           String        @default(uuid()) @id
  firebaseUid  String        @unique
  createdAt    DateTime      @default(now())
  avatarUrl    String?
  displayName  String?       @unique
  firstname    String?
  lastname     String?
  bio          String?
  birthdate    DateTime?
  gender       Gender?
  height       Int?
  weight       Int?
  gymBox       String?
  townCity     String?
  country      String?
  benchmarks   Benchmark[]
  leagues      League[]      @relation(references: [id])
  worldRecords WorldRecord[]
}

model Workout {
  id            String         @default(uuid()) @id
  name          String         @unique
  category      WodCategory
  summary       String
  description   String?
  workoutType   WorkoutType
  workoutMoves  WorkoutMove[]
  workoutVideos WorkoutVideo[]
  worldRecord   WorldRecord[]
  benchmarks    Benchmark[]
}

model WorkoutMove {
  id                  String  @default(uuid()) @id
  beginnerScaling     String?
  intermediateScaling String?
  prescribedScaling   String?
  repsPerRound        Int?
  move                Move    @relation(fields: [moveId], references: [id])
  moveId              String
  workout             Workout @relation(fields: [workoutId], references: [id])
  workoutId           String
}

model WorkoutVideo {
  id          String    @default(uuid()) @id
  createdAt   DateTime  @default(now())
  videoUrl    String
  notes       String?
  workout     Workout   @relation(fields: [workoutId], references: [id])
  workoutId   String
  benchmark   Benchmark @relation(fields: [benchmarkId], references: [id])
  benchmarkId String
}

model WorldRecord {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  notes       String?
  recordValue Int
  recordType  RecordType
  gender      Gender
  workout     Workout    @relation(fields: [workoutId], references: [id])
  workoutId   String
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

enum Gender {
  MALE
  FEMALE
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ELITE
}

// AMRAP in reps
// TIME in seconds
// LOAD in lbs
enum RecordType {
  AMRAP
  FORTIME
  FORLOAD
}

// https://beyondthewhiteboard.com/gyms/2-main-site/leader_boards/414
enum WodCategory {
  GIRLS
  HEROES
  NOTABLES
}

enum WorkoutType {
  AMRAP
  FORTIME
  FORLOAD
}