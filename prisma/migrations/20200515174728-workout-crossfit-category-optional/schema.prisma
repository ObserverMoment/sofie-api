// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

// url = "***"
datasource db {
  provider = "postgresql"
  url = "***"
}

model Benchmark {
  id               String          @default(uuid()) @id
  createdAt        DateTime        @default(now())
  completedOn      DateTime
  level            Level
  score            Int
  note             String?
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  challenge        Challenge?      @relation(fields: [challengeId], references: [id])
  challengeId      String?
  benchmarkVideo   BenchmarkVideo? @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId String?
}

model BenchmarkVideo {
  id                        String                     @default(uuid()) @id
  createdAt                 DateTime                   @default(now())
  videoUrl                  String
  note                      String?
  benchmark                 Benchmark
  benchmarkId               String
  benchmarkVideoValidations BenchmarkVideoValidation[]
}

model BenchmarkVideoValidation {
  id                    String                @default(uuid()) @id
  createdAt             DateTime              @default(now())
  createdByUser         User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId       String
  isValid               Boolean
  benchmarkVideo        BenchmarkVideo        @relation(fields: [benchmarkVideoId], references: [id])
  benchmarkVideoId      String
  benchmarkVideoComment BenchmarkVideoComment
}

model BenchmarkVideoComment {
  id                         String                         @default(uuid()) @id
  createdAt                  DateTime                       @default(now())
  createdByUser              User                           @relation(fields: [createdByUserId], references: [id])
  createdByUserId            String
  benchmarkVideoValidation   BenchmarkVideoValidation?      @relation(fields: [benchmarkVideoValidationId], references: [id])
  benchmarkVideoValidationId String?
  comment                    String
  replies                    BenchmarkVideoCommentReplies[]
}

model BenchmarkVideoCommentReplies {
  id                      String                @default(uuid()) @id
  createdAt               DateTime              @default(now())
  createdByUser           User                  @relation(fields: [createdByUserId], references: [id])
  createdByUserId         String
  comment                 String
  benchmarkVideoComment   BenchmarkVideoComment @relation(fields: [benchmarkVideoCommentId], references: [id])
  benchmarkVideoCommentId String
}

model Challenge {
  id          String          @default(uuid()) @id
  createdAt   DateTime        @default(now())
  scope       AccessScopeType @default(PRIVATE)
  name        String          @unique
  category    String?
  description String?
  imageUrl    String?
  group       Group           @relation(fields: [groupId], references: [id])
  groupId     String
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  workout     Workout[]       @relation(references: [id])
  benchmarks  Benchmark[]
  watchers    User[]          @relation("watchersToChallenges", references: [id])
}

model Group {
  id          String          @default(uuid()) @id
  scope       AccessScopeType @default(PRIVATE)
  logoUrl     String?
  name        String          @unique
  countryCode String?
  description String?
  createdBy   User            @relation("group_creator", fields: [createdById], references: [id])
  createdById String
  admins      User[]          @relation("group_admin", references: [id])
  members     User[]          @relation("group_member", references: [id])
  challenges  Challenge[]
}

model Move {
  id           String          @default(uuid()) @id
  createdAt    DateTime        @default(now())
  createdBy    User?           @relation(fields: [createdById], references: [id])
  createdById  String?
  scope        AccessScopeType @default(PRIVATE)
  name         String          @unique
  description  String?
  demoVideoUrl String?
  workoutMoves WorkoutMove[]
}

model WorkoutMove {
  id                  String   @default(uuid()) @id
  createdAt           DateTime @default(now())
  createdBy           User?    @relation(fields: [createdById], references: [id])
  createdById         String?
  beginnerScaling     String?
  intermediateScaling String?
  prescribedScaling   String?
  repsPerRound        Int?
  move                Move     @relation(fields: [moveId], references: [id])
  moveId              String
  workout             Workout  @relation(fields: [workoutId], references: [id])
  workoutId           String
}

model Workout {
  id                String             @default(uuid()) @id
  createdAt         DateTime           @default(now())
  createdBy         User?              @relation(fields: [createdById], references: [id])
  createdById       String?
  name              String             @unique
  summary           String?
  description       String?
  scope             AccessScopeType    @default(PRIVATE)
  crossfitCategory  WodCategory?
  workoutType       WorkoutType
  workoutMoves      WorkoutMove[]
  worldRecords      WorldRecord[]
  challenges        Challenge[]        @relation(references: [id])
  scheduledWorkouts ScheduledWorkout[]
}

model ScheduledWorkout {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  notes       String?
  scheduledAt DateTime @default(now())
  completed   Boolean  @default(false)
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
}

model WorldRecord {
  id          String      @default(uuid()) @id
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  notes       String?
  recordValue Int
  recordType  WorkoutType @default(AMRAP)
  gender      Gender
  workout     Workout     @relation(fields: [workoutId], references: [id])
  workoutId   String
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
}

// Height in cms / weight in kgs
model User {
  id                           String                         @default(uuid()) @id
  firebaseUid                  String                         @unique
  createdAt                    DateTime                       @default(now())
  hasOnboarded                 Boolean                        @default(false)
  avatarUrl                    String?
  displayName                  String?                        @unique
  firstname                    String?
  lastname                     String?
  bio                          String?
  birthdate                    DateTime?
  gender                       Gender?
  height                       Float?
  weight                       Float?
  gymBox                       String?
  townCity                     String?
  countryCode                  String?
  unitSystem                   UnitSystem                     @default(METRIC)
  benchmarks                   Benchmark[]
  worldRecords                 WorldRecord[]
  challenges                   Challenge[]
  benchmarkVideoValidations    BenchmarkVideoValidation[]
  benchmarkVideoComments       BenchmarkVideoComment[]
  BenchmarkVideoCommentReplies BenchmarkVideoCommentReplies[]
  watchedChallenges            Challenge[]                    @relation("watchersToChallenges", references: [id])
  followers                    UserConnection[]               @relation("followee")
  following                    UserConnection[]               @relation("follower")
  groupsWhereAdmin             Group[]                        @relation("group_admin")
  groupsWhereMember            Group[]                        @relation("group_member")
  groupsWhereCreator           Group[]                        @relation("group_creator")
  moves                        Move[]
  workoutMoves                 WorkoutMove[]
  workouts                     Workout[]
  scheduledWorkouts            ScheduledWorkout[]
}

// Need to check if the below names are the correct way around
// What actually happens (what query is made) when you run User.followers with @relation("followee")?
// Does it get all UserConnections where followeeId = user.id?
// If so then this is probably the correct way around...
// As it would be all the instances where the user is the followee.
// https://github.com/prisma/prisma/issues/1483
model UserConnection {
  id         String   @default(uuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followee   User?    @relation("followee", fields: [followeeId], references: [id])
  followeeId String?
}

// Enums
enum AccessScopeType {
  OFFICIAL
  PUBLIC
  GROUP
  PRIVATE
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ELITE
}

// AMRAP in reps
// TIME in seconds
// LOAD in kgs
enum WorkoutType {
  AMRAP
  AMROUNDS
  FORDISTANCE
  FORTIME
  FORLOAD
}

// https://beyondthewhiteboard.com/gyms/2-main-site/leader_boards/414
enum WodCategory {
  GIRLS
  HEROES
  NOTABLES
}

enum UnitSystem {
  IMPERIAL
  METRIC
}