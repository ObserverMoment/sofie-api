// https://github.com/prisma/prisma2
// SDL first example: https://github.com/prisma/prisma-examples/tree/prisma2/javascript/graphql-sdl-first
// Migrations: https://github.com/prisma/migrate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Equipment {
  id                 String        @id @default(uuid())
  name               String        @unique
  imageUrl           String?
  loadAdjustable     Boolean       @default(true)
  requiredForMoves   Move[]        @relation("moveToRequiredEquipments", references: [id])
  selectableForMoves Move[]        @relation("moveToSelectableEquipments", references: [id])
  workoutMoves       WorkoutMove[]
  gymProfiles        GymProfile[]
}

model GymProfile {
  id                  String             @id @default(uuid())
  user                User               @relation(fields: [userId], references: [id])
  userId              String
  name                String
  description         String?
  postcode            String?
  // i.e. there is no equipment as this gym.
  bodyweightOnly      Boolean            @default(false)
  availableEquipments Equipment[]
  scheduledWorkouts   ScheduledWorkout[]
  loggedWorkouts      LoggedWorkout[]
}

model LikedWorkout {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  notes     String?
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId String

  @@id([userId, workoutId])
}

// Data from a completed workout. Also inlcudes relation to the 'original' workout
model LoggedWorkout {
  id                        String                   @id @default(uuid())
  name                      String
  summary                   String?
  description               String?
  createdAt                 DateTime                 @default(now())
  completedOn               DateTime
  completedBy               User                     @relation(fields: [completedById], references: [id])
  completedById             String
  notes                     String?
  videoUrl                  String?
  videoThumbUrl             String?
  imageUrl                  String?
  duration                  Int?
  workoutType               WorkoutType              @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId             String
  /// @onDelete(CASCADE)
  workoutSections           WorkoutSection[]
  originalWorkout           Workout?                 @relation(fields: [originalWorkoutId], references: [id])
  originalWorkoutId         String?
  scheduledWorkout          ScheduledWorkout?
  scheduledWorkoutId        String?
  gymProfile                GymProfile?              @relation(fields: [gymProfileId], references: [id])
  gymProfileId              String?
  // Logged workouts against a particular user and program in which they are enrolled.
  // Enables tracking of completeness of the program and also history / score generation.
  workoutProgramEnrolment   WorkoutProgramEnrolment? @relation(fields: [workoutProgramEnrolmentId], references: [id])
  workoutProgramEnrolmentId String?
}

model Move {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  createdBy            User?                @relation(fields: [createdById], references: [id])
  createdById          String?
  type                 MoveType             @default(STANDARD)
  name                 String               @unique
  description          String?
  demoVideoUrl         String?
  validRepTypes        WorkoutMoveRepType[]
  requiredEquipments   Equipment[]          @relation("moveToRequiredEquipments", references: [id])
  selectableEquipments Equipment[]          @relation("moveToSelectableEquipments", references: [id])
  moveProfileRequired  MoveProfile[]        @relation("requiredMoves", references: [id])
  moveProfileExcluded  MoveProfile[]        @relation("excludedMoves", references: [id])
  workoutMoves         WorkoutMove[]
}

model MoveProfile {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  name          String
  description   String?
  requiredMoves Move[]  @relation("requiredMoves", references: [id])
  excludedMoves Move[]  @relation("excludedMoves", references: [id])
}

model ScheduledWorkout {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  notes           String?
  scheduledAt     DateTime       @default(now())
  workout         Workout        @relation(fields: [workoutId], references: [id])
  workoutId       String
  loggedWorkout   LoggedWorkout? @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId String?
  gymProfile      GymProfile?    @relation(fields: [gymProfileId], references: [id])
  gymProfileId    String?
}

// Height in cms / weight in kgs
model User {
  id                       String                    @id @default(uuid())
  firebaseUid              String                    @unique
  createdAt                DateTime                  @default(now())
  hasOnboarded             Boolean                   @default(false)
  avatarUrl                String?
  displayName              String?                   @unique
  firstname                String?
  lastname                 String?
  themePreference          ThemePreference           @default(DARK)
  bio                      String?
  birthdate                DateTime?
  gender                   Gender?                   @default(UNSPECIFIED)
  height                   Float?
  weight                   Float?
  townCity                 String?
  countryCode              String?
  unitSystem               UnitSystem                @default(METRIC)
  followedBy               User[]                    @relation("UserFollows", references: [id])
  following                User[]                    @relation("UserFollows", references: [id])
  moves                    Move[]
  workouts                 Workout[]
  /// @onDelete(CASCADE)
  scheduledWorkouts        ScheduledWorkout[]
  /// @onDelete(CASCADE)
  loggedWorkouts           LoggedWorkout[]
  /// @onDelete(CASCADE)
  likedWorkouts            LikedWorkout[]
  /// @onDelete(CASCADE)
  gymProfiles              GymProfile[]
  /// @onDelete(CASCADE)
  moveProfiles             MoveProfile[]
  workoutProgramsCreated   WorkoutProgram[]
  /// @onDelete(CASCADE)
  workoutProgramEnrolments WorkoutProgramEnrolment[]
  workoutProgramReviews    WorkoutProgramReview[]
}

model Workout {
  id                String                  @id @default(uuid())
  createdAt         DateTime                @default(now())
  createdBy         User?                   @relation(fields: [createdById], references: [id])
  createdById       String?
  name              String
  summary           String?
  description       String?
  demoVideoUrl      String?
  demoVideoThumbUrl String?
  youtubeVideoUrl   String?
  spotifyAudio      String?
  imageUrl          String?
  timecap           Int?
  // structureData holds config info for certain workout types. E.g. Circuits and Tabatas.
  builderData       Json?
  difficultyLevel   Int                     @default(50)
  scope             AccessScopeType         @default(PRIVATE)
  workoutType       WorkoutType             @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId     String
  /// @onDelete(CASCADE)
  workoutSections   WorkoutSection[]
  scheduledWorkouts ScheduledWorkout[]
  workoutLogs       LoggedWorkout[]
  /// @onDelete(CASCADE)
  likes             LikedWorkout[]
  workoutPrograms   WorkoutProgramWorkout[]
}

model WorkoutGoal {
  id              String           @id @default(uuid())
  name            String
  description     String
  workoutPrograms WorkoutProgram[]
}

model WorkoutMove {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now())
  sortPosition        Int
  repType             WorkoutMoveRepType @default(REPS)
  reps                Float?             @default(10)
  distanceUnit        DistanceUnit       @default(METRES)
  loadAmount          Float?
  loadUnit            LoadUnit           @default(KG)
  // For logging. Number of seconds it took to complete the workoutMove
  duration            Int?
  description         String?
  notes               String?
  move                Move               @relation(fields: [moveId], references: [id])
  moveId              String
  selectedEquipment   Equipment?         @relation(fields: [selectedEquipmentId], references: [id])
  selectedEquipmentId String?
  workoutSection      WorkoutSection     @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId    String
}

model WorkoutProgram {
  id              String                    @id @default(uuid())
  createdAt       DateTime                  @default(now())
  name            String
  description     String
  imageUrl        String?
  videoUrl        String?
  videoThumbUrl   String?
  scope           AccessScopeType           @default(PRIVATE)
  createdBy       User                      @relation(fields: [createdById], references: [id])
  createdById     String
  /// @onDelete(CASCADE)
  enrolments      WorkoutProgramEnrolment[]
  workoutGoals    WorkoutGoal[]
  /// @onDelete(CASCADE)
  programWorkouts WorkoutProgramWorkout[]
  /// @onDelete(CASCADE)
  programReviews  WorkoutProgramReview[]
}

model WorkoutProgramEnrolment {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  startDate        DateTime?       @default(now())
  workoutProgram   WorkoutProgram  @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  loggedWorkouts   LoggedWorkout[]
}

model WorkoutProgramReview {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  score            Float
  comment          String?
  workoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String
}

model WorkoutProgramWorkout {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  // Day on which the workout is planned. i.e. day 8 == week 2 day 1.
  // The decimal can be used to differentiate between having multiple workouts on each day.
  dayNumber        Float
  notes            String?
  workoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId String
  workout          Workout        @relation(fields: [workoutId], references: [id])
  workoutId        String
}

// Need to implement some more solid polymorphism here if we want to allow a workoutSection
// to be on a workout or a loggedWorkout
// Currently no validation makinhg sure the section is not parentless.
model WorkoutSection {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  sortPosition     Int
  notes            String?
  timecap          Int?
  // For logging. Number of seconds it took to complete a single round of the section
  duration         Int?
  rounds           Int
  workout          Workout?          @relation(fields: [workoutId], references: [id])
  workoutId        String?
  /// @onDelete(CASCADE)
  workoutMoves     WorkoutMove[]
  /// @onDelete(CASCADE)
  roundAdjustRules RoundAdjustRule[]
  loggedWorkout    LoggedWorkout?    @relation(fields: [loggedWorkoutId], references: [id])
  loggedWorkoutId  String?
}

model WorkoutType {
  id                  String           @id @default(uuid())
  name                String
  description         String
  placeholderImageUrl String
  scoreType           WorkoutScoreType
  workouts            Workout[]
  loggedWorkouts      LoggedWorkout[]
}

// Enums
enum AccessScopeType {
  OFFICIAL
  PUBLIC
  PRIVATE
}

enum DistanceUnit {
  METRES
  KILOMETRES
  YARDS
  MILES
}

enum FrequencyPeriod {
  DAY
  TWODAYS
  WEEK
  TWOWEEKS
  MONTH
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum LoadUnit {
  KG
  LB
  BODYWEIGHTPERCENT
}

// Standard moves are built in / official.
// Custom moves are created by users.
enum MoveType {
  STANDARD
  CUSTOM
}

enum ThemePreference {
  DARK
  LIGHT
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

enum WorkoutMoveRepType {
  REPS
  CALORIES
  DISTANCE
  TIME
}

// AMREPS in reps
// TIME in seconds
// LOAD in kgs
enum WorkoutScoreType {
  AMREPS
  FORTIME
  FORLOAD
}

//// Not being used ///
// Every {roundFrequency} rounds {operator} reps by {amount}
// Eg. Every 3 rounds INCREASE reps by 10 (for all workout moves within the section)
// Currently not in use pending validation of concept and design of UI.
model RoundAdjustRule {
  id               String         @id @default(uuid())
  action           RuleAction
  target           RuleTarget
  amount           Float
  roundFrequency   Int            @default(1) // Every round
  WorkoutSection   WorkoutSection @relation(fields: [workoutSectionId], references: [id])
  workoutSectionId String
}

enum RuleAction {
  INCREASE
  DECREASE
  MULTIPLY
}

enum RuleTarget {
  REPS
  LOAD
}
